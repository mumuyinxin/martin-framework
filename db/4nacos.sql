USE nacos;

/*
去navicate导出结构+数据
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for config_info
-- ----------------------------
DROP TABLE IF EXISTS `config_info`;
CREATE TABLE `config_info` (
                               `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
                               `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
                               `group_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
                               `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'content',
                               `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'md5',
                               `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
                               `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
                               `src_user` text CHARACTER SET utf8 COLLATE utf8_bin COMMENT 'source user',
                               `src_ip` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'source ip',
                               `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
                               `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
                               `c_desc` varchar(256) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
                               `c_use` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
                               `effect` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
                               `type` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
                               `c_schema` text CHARACTER SET utf8 COLLATE utf8_bin,
                               PRIMARY KEY (`id`),
                               UNIQUE KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)
) ENGINE=InnoDB AUTO_INCREMENT=378 DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='config_info';

-- ----------------------------
-- Records of config_info
-- ----------------------------
BEGIN;
INSERT INTO `config_info` VALUES (38, 'martin-biz-system-dev.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      ignore-urls:\r\n        - /client/test\r\n        - /user/loadUserByUsername/*\r\n        - /**', 'f6205f62e9d692552c0a713a7cbd859c', '2020-09-15 15:08:52', '2020-09-15 15:08:52', '', '0:0:0:0:0:0:0:1', '', 'e3023b28-3639-42ca-a228-0da01df8a64d', NULL, NULL, NULL, 'yaml', '');
INSERT INTO `config_info` VALUES (75, 'application-release.yml', 'DEFAULT_GROUP', 'martin:\n  swagger:\n    enabled: true\n  resource-server:\n    enabled: true\n  feign:\n    enabled: true\n    secret: 12345678\n  data:\n    enabled: true\n  message:\n    enabled: true\n  social:\n    enabled: false\n  oss:\n    enabled: true\n    type: 0\n    endpoint: http://localhost:9000/\n    accessKey: minio\n    secretKey: minio123\n  ui:\n    url: https://www.zerocode.net.cn\n\n\nribbon:\n  ReadTimeout: 10000\n  ConnectTimeout: 10000\n  ServerListRefreshInterval: 3000\n\n\n \n\n\nspring:\n  profiles:\n    active: dev\n  redis:\n    host: martin-redis\n    port: 6379\n    inetutils:\n      ignored-interfaces:\n        - docker0\n        - veth.*\n        - VM.*\n  servlet:\n    multipart:\n      # 根据实际需求作调整\n      # 默认最大上传文件大小为1M，单个文件大小\n      max-file-size: 10MB\n      # 默认最大请求大小为10M，总上传的数据大小\n      max-request-size: 15MB\n  # 数据源\n  datasource:\n    url: jdbc:mysql://martin-mysql:3306/martin?useUnicode=true&useSSL=false&characterEncoding=utf8&serverTimezone=GMT%2B8\n    type: com.zaxxer.hikari.HikariDataSource\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: martin\n    password: martin\n    #验证连接的有效性\n    test-while-idle: true\n    #空闲连接回收的时间间隔，与test-while-idle一起使用，设置5分钟\n    time-between-eviction-runs-millis: 300000\n    #连接池空闲连接的有效时间 ，设置30分钟\n    min-evictable-idle-time-millis: 1800000\n    #获取连接时候验证\n    test-on-borrow: true\n    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，\'wall\'用于防火墙\n    filters: stat,wall,slf4j\n    hikari:\n      ## 最小空闲连接数量\n      minimum-idle: 5\n      ## 空闲连接存活最大时间，默认600000（10分钟）\n      idle-timeout: 180000\n      ## 连接池最大连接数，默认是10\n      maximum-pool-size: 20\n      ## 此属性控制从池返回的连接的默认自动提交行为,默认值：true\n      auto-commit: true\n      ## 连接池母子\n      pool-name: MyHikariCP\n      ## 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认1800000即30分钟\n      max-lifetime: 1800000\n      ## 数据库连接超时时间,默认30秒，即30000\n      connection-timeout: 60000\n      connection-test-query: SELECT 1\n      #connection-test-query: select 1 from dual\n  boot:\n    admin:\n      client:\n        url: http://martin-extension-monitor:9601\n\n  cloud:\n    nacos:\n      metadata:\n        preserved.heart.beat.interval: 1000\n        preserved.heart.beat.timeout: 3000\n        preserved.ip.delete.timeout: 3000\n    sentinel:\n      transport:\n        # 配置Sentinel dashborad地址\n        dashboard: ${SENTINEL-DASHBOARD-HOST:martin-sentinel}:${SENTINEL-DASHBOARD-PORT:9604}\n        port: ${SENTINEL-PORT:8719}\n      # 取消Sentinel控制台懒加载\n      eager: true\n      # 添加Nacos数据源配置\n      datasource:\n        ds1-nacos:\n          nacos:\n            server-addr: ${spring.cloud.nacos.discovery.server-addr}\n            username: nacos\n            password: nacos\n            dataId: ${spring.application.name}-sentinel\n            groupId: DEFAULT_GROUP\n            data-type: json\n            rule-type: flow   \n\n\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \"*\"  \n  endpoint:\n    health:\n      show-details: ALWAYS\n\nfoot: foot\n\nauth-server: http://martin-cloud-gateway:9502/auth\n\n#本项目用一个资源配置，将来可为每个服务单独配置oauth信息\nsecurity:\n  oauth2:\n    client:\n      client-id: client2 # 授权服务器配置的client id\n      client-secret: 123456 # 授权服务器配置的client secret\n      scope: all\n      #access-token-uri: ${auth-server}/oauth/token # 获取access token接口\n      #user-authorization-uri: ${auth-server}/oauth/authorize #  获取Authorization Code接口\n    resource:\n      token-info-uri: ${auth-server}/oauth/check_token # 验证token的接口\n#      user-info-uri: ${auth-server}/user # 一个可以获取认证授权的自定义接口，可以在授权服务器，也可以在其他服务器上\n#      prefer-token-info: true # 如果同时配置了token-info-uri 和 user-info-uri，这个现象设置使用哪个取验证授权\n\n\nmybatis-plus:\n  # 如果是放在src/main/java目录下 classpath:/com/yourpackage/*/mapper/*Mapper.xml\n  # 如果是放在resource目录 classpath:/mapper/*Mapper.xml\n  mapper-locations: \n    - classpath:/mapper/**/*Mapper.xml\n    - classpath:/mapper/*Mapper.xml\n  #实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.java2e.martin.*.entity\n  global-config:\n    #主键类型  0:\"数据库ID自增\", 1:\"用户输入ID\",2:\"全局唯一ID (数字类型唯一ID)\", 3:\"全局唯一ID UUID\";\n    id-type: 3\n    #字段策略 0:\"忽略判断\",1:\"非 NULL 判断\"),2:\"非空判断\"\n    field-strategy: 2\n    #驼峰下划线转换\n    db-column-underline: true\n    #mp2.3+ 全局表前缀 mp_\n    #table-prefix: mp_\n    #刷新mapper 调试神器\n    is-refresh: true\n    #数据库大写下划线转换\n    #capital-mode: true\n    # Sequence序列接口实现类配置,oracle用\n    #key-generator: com.baomidou.mybatisplus.incrementer.OracleKeyGenerator\n    #逻辑删除配置（下面3个配置）\n    logic-delete-value: 1\n    logic-not-delete-value: 0\n    #sql-injector: com.baomidou.mybatisplus.mapper.LogicSqlInjector\n    #自定义填充策略接口实现\n    #meta-object-handler: com.baomidou.springboot.MyMetaObjectHandler\n  configuration:\n    #配置返回数据库(column下划线命名&&返回java实体是驼峰命名)，自动匹配无需as（没开启这个，SQL需要写as： select user_id as userId）\n    map-underscore-to-camel-case: true\n    cache-enabled: false\n    #配置JdbcTypeForNull, oracle数据库必须配置\n    jdbc-type-for-null: \'null\'\n    lazyLoadingEnabled: true #延时加载的开关\n    multipleResultSetsEnabled: true #开启的话，延时加载一个属性时会加载该对象全部属性，否则按需加载属性\n\n#swagger公共信息\nswagger:\n  host: localhost:9502\n  title: Amap Swagger API\n  description: Martin 聚合文档\n  version: 2.0\n  license: Powered By java2e\n  licenseUrl: http://java2e.com/\n  terms-of-service-url: http://java2e.com/\n  contact:\n    name: 狮少\n    email: liangcan.jxjy.edu@gmail.com\n    url: https://java2e.com/about.html\n  authorization:\n    name: Martin OAuth\n    auth-regex: ^.*$\n    authorization-scope-list:\n      - scope: server\n        description: server all\n    token-url-list:\n      - ${security.auth.server}/token\n\n\n\n', 'fc8ba5bbd77875997ee1b510b7ed4840', '2022-04-14 15:45:40', '2022-04-16 04:03:24', NULL, '172.18.0.1', '', 'a4985870-e534-46a8-a008-1459cc86c3d3', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (78, 'martin-biz-resource-release.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      client-id: client2 # 授权服务器配置的client id\r\n      client-secret: 123456 # 授权服务器配置的client secret\r\n      scope: select\r\n      ignore-urls:\r\n        - /test\r\n        - /actuator/**\r\n      #access-token-uri: ${auth-server}/oauth/token # 获取access token接口\r\n      #user-authorization-uri: ${auth-server}/oauth/authorize #  获取Authorization Code接口\r\n    resource:\r\n      token-info-uri: ${auth-server}/oauth/check_token # 验证token的接口\r\n#      user-info-uri: ${auth-server}/user # 一个可以获取认证授权的自定义接口，可以在授权服务器，也可以在其他服务器上\r\n#      prefer-token-info: true # 如果同时配置了token-info-uri 和 user-info-uri，这个现象设置使用哪个取验证授权\r\n', '01a2f8e2736bf09d5eb420b12a20f4e5', '2022-04-14 15:45:40', '2022-04-14 15:45:40', NULL, '172.18.0.1', '', 'a4985870-e534-46a8-a008-1459cc86c3d3', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (79, 'martin-biz-sso-release.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      client-id: client3\r\n      client-secret: 123456\r\n      scope: sso\r\n      ignore-urls:\r\n        - /client/test\r\n        - /actuator/**\r\n      access-token-uri: ${auth-server}/oauth/token\r\n      user-authorization-uri: ${auth-server}/oauth/authorize\r\n    resource:\r\n      token-info-uri: ${auth-server}/oauth/check_token\r\n', 'fda9e8240ce33c6fd03040e35062746c', '2022-04-14 15:45:40', '2022-04-14 15:45:40', NULL, '172.18.0.1', '', 'a4985870-e534-46a8-a008-1459cc86c3d3', NULL, NULL, NULL, 'null', NULL);
INSERT INTO `config_info` VALUES (80, 'martin-biz-swagger-release.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      client-id: client3\r\n      client-secret: 123456\r\n      scope: swagger\r\n      ignore-urls:\r\n        - /actuator/**', 'ff6687cf299058979ccc5eb55005b5d4', '2022-04-14 15:45:40', '2022-04-14 15:45:40', NULL, '172.18.0.1', '', 'a4985870-e534-46a8-a008-1459cc86c3d3', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (81, 'martin-biz-system-release.yml', 'DEFAULT_GROUP', 'security:\n  oauth2:\n    client:\n      ignore-urls:\n        - /client/test\n        - /user/loadUserByUsername/*\n        - /log/add\n        - /user/loadDynamicSecurity\n        - /error\n        - /user/test1\n        - /menu/getCurrentUserMenusByRoles\n        - /user/currentUser\n        - /user/getUserByWechatOpenId\n        - /user/social/register\n\n \n        \n\n\nmartin:\n  feign:\n    secret: 123456789', '484544f0000323f04f925e2bd1069936', '2022-04-14 15:45:40', '2022-04-14 15:45:40', NULL, '172.18.0.1', '', 'a4985870-e534-46a8-a008-1459cc86c3d3', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (82, 'martin-cloud-gateway-release.yml', 'DEFAULT_GROUP', 'spring:\n  cloud:\n    gateway:\n      discovery:\n        locator:\n          enabled: true\n          lowerCaseServiceId: true\n      routes:\n        - id: martin-biz-auth\n          uri: lb://martin-biz-auth\n          predicates:\n            - Path=/auth/**\n          filters:\n            - StripPrefix=1\n        - id: martin-biz-resource\n          uri: lb://martin-biz-resource\n          predicates:\n            - Path=/reso/**\n          filters:\n            - StripPrefix=1\n        - id: martin-biz-sso\n          uri: lb://martin-biz-sso\n          predicates:\n            - Path=/sso/**\n          filters:\n            - StripPrefix=1\n        - id: martin-biz-swagger\n          uri: lb://martin-biz-swagger\n          predicates:\n            - Path=/swag/**\n          filters:\n            - StripPrefix=1\n        - id: martin-biz-system\n          uri: lb://martin-biz-system\n          predicates:\n            - Path=/syst/**\n          filters:\n            - StripPrefix=1\n        - id: martin-extension-generator\n          uri: lb://martin-extension-generator\n          predicates:\n            - Path=/gene/**\n          filters:\n            - StripPrefix=1       \n        - id: martin-extension-quartz\n          uri: lb://martin-extension-quartz\n          predicates:\n            - Path=/quar/**\n          filters:\n            - StripPrefix=1  \n        - id: martin-extension-ncnb\n          uri: lb://martin-extension-ncnb\n          predicates:\n            - Path=/ncnb/**\n          filters:\n            - StripPrefix=1  ', '315544cbac463253321ce8de0dfbad68', '2022-04-14 15:45:40', '2022-04-14 15:45:40', NULL, '172.18.0.1', '', 'a4985870-e534-46a8-a008-1459cc86c3d3', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (83, 'martin-extension-generator-release.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      ignore-urls:\r\n        - /actuator/**', 'f79b70a53d86ad29cccbfc80fba33bf8', '2022-04-14 15:45:40', '2022-04-14 15:45:40', NULL, '172.18.0.1', '', 'a4985870-e534-46a8-a008-1459cc86c3d3', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (84, 'martin-extension-skywalking-release.yml', 'DEFAULT_GROUP', 'security:\n  oauth2:\n    client:\n      ignore-urls:\n        - /alarm/mail\n        - /actuator/**\n\n\n', '57337040640aaed21a9643c98b8e2fa8', '2022-04-14 15:45:40', '2022-04-14 15:45:40', NULL, '172.18.0.1', '', 'a4985870-e534-46a8-a008-1459cc86c3d3', NULL, NULL, NULL, 'text', NULL);
INSERT INTO `config_info` VALUES (85, 'martin-biz-system-sentinel', 'DEFAULT_GROUP', '[\r\n    {\r\n        \"resource\": \"/user/page\",\r\n        \"limitApp\": \"default\",\r\n        \"grade\": 1,\r\n        \"count\": 1,\r\n        \"strategy\": 0,\r\n        \"controlBehavior\": 0,\r\n        \"clusterMode\": false\r\n    },\r\n        {\r\n        \"resource\": \"/element/page\",\r\n        \"limitApp\": \"default\",\r\n        \"grade\": 1,\r\n        \"count\": 3,\r\n        \"strategy\": 0,\r\n        \"controlBehavior\": 0,\r\n        \"clusterMode\": false\r\n    }\r\n]\r\n', 'd211238460434e18222863e5277ca8ee', '2022-04-14 15:45:40', '2022-04-14 15:45:40', NULL, '172.18.0.1', '', 'a4985870-e534-46a8-a008-1459cc86c3d3', NULL, NULL, NULL, '', NULL);
INSERT INTO `config_info` VALUES (87, 'martin-extension-quartz-release.yml', 'DEFAULT_GROUP', 'security:\n  oauth2:\n    client:\n      ignore-urls:\n        - /actuator/**\n        - /quartz/**\n\nspring:\n  quartz:\n    auto-startup: true\n    properties:\n      org:\n        quartz:\n          scheduler:\n            instanceName: MartinScheduler\n            instanceId: AUTO\n          jobStore:\n            class: org.quartz.impl.jdbcjobstore.JobStoreTX\n            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n            tablePrefix: QRTZ_\n            isClustered: false #是否使用集群\n            clusterCheckinInterval: 10000\n            useProperties: false\n          threadPool:\n            class: org.quartz.simpl.SimpleThreadPool\n            threadCount: 10\n            threadPriority: 5\n            threadsInheritContextClassLoaderOfInitializingThread: true\n    #数据库方式\n    job-store-type: jdbc\n    #初始化表结构\n    jdbc:\n      initialize-schema: never\n', 'd701ab28b38ff462c000e688496feb5c', '2022-04-14 15:45:40', '2022-04-14 15:45:40', NULL, '172.18.0.1', '', 'a4985870-e534-46a8-a008-1459cc86c3d3', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (88, 'martin-extension-ncnb-release.yml', 'DEFAULT_GROUP', 'security:\n  oauth2:\n    client:\n      ignore-urls:\n        - /endpoint/**\n\n\nspring:\n  # 数据源\n  datasource:\n    url: jdbc:mysql://martin-mysql:3306/erd?useUnicode=true&useSSL=false&characterEncoding=utf8&serverTimezone=GMT%2B8\n    type: com.zaxxer.hikari.HikariDataSource\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: erd\n    password: erd\n\nmartin:\n  websocket:\n    enabled: false\n    enableSimpleBroker: /topic,/queue\n    applicationDestinationPrefixes: /app\n    endpoint: /endpoint\n    allowedOrigins: http://localhost:8000,http://localhost:9502,http://localhost:3000,http://erd-online:3000\n  socketio:\n    enabled: true\n    hostname: localhost\n    port: 9092\n    bossThreads: 0\n    workerThreads: 0\n    allowCustomRequests: false\n    upgradeTimeout: 10000\n    pingTimeout: 60000\n    pingInterval: 25000\n    firstDataTimeout: 5000\n    maxHttpContentLength: 65536\n    maxFramePayloadLength: 65536\n    sslProtocol: \"TLSv1\"\n    keyStoreFormat: \"JKS\"\n    trustStoreFormat: \"JKS\"\n    preferDirectBuffer: true\n    addVersionHeader: true\n    httpCompression: true\n    websocketCompression: true\n    randomSession: false\n    retryCount: 3', '522e74d019997d3c6f7a52465ac0bd7d', '2022-04-14 15:45:40', '2022-04-14 15:45:40', NULL, '172.18.0.1', '', 'a4985870-e534-46a8-a008-1459cc86c3d3', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (92, 'application-dev.yml', 'DEFAULT_GROUP', 'foo:123', '03fd93e6d76a7646aaf44edb22cb78ad', '2022-04-16 03:45:08', '2022-04-16 03:47:24', NULL, '172.18.0.1', '', 'd8339c99-a440-4074-8b0b-4a54cfebfa67', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (94, 'martin-biz-resource-dev.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      client-id: client2 # 授权服务器配置的client id\r\n      client-secret: 123456 # 授权服务器配置的client secret\r\n      scope: select\r\n      ignore-urls:\r\n        - /test\r\n        - /actuator/**\r\n      #access-token-uri: ${auth-server}/oauth/token # 获取access token接口\r\n      #user-authorization-uri: ${auth-server}/oauth/authorize #  获取Authorization Code接口\r\n    resource:\r\n      token-info-uri: ${auth-server}/oauth/check_token # 验证token的接口\r\n#      user-info-uri: ${auth-server}/user # 一个可以获取认证授权的自定义接口，可以在授权服务器，也可以在其他服务器上\r\n#      prefer-token-info: true # 如果同时配置了token-info-uri 和 user-info-uri，这个现象设置使用哪个取验证授权\r\n', '01a2f8e2736bf09d5eb420b12a20f4e5', '2022-04-16 03:45:08', '2022-04-16 03:45:08', NULL, '172.18.0.1', '', 'd8339c99-a440-4074-8b0b-4a54cfebfa67', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (95, 'martin-biz-sso-dev.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      client-id: client3\r\n      client-secret: 123456\r\n      scope: sso\r\n      ignore-urls:\r\n        - /client/test\r\n        - /actuator/**\r\n      access-token-uri: ${auth-server}/oauth/token\r\n      user-authorization-uri: ${auth-server}/oauth/authorize\r\n    resource:\r\n      token-info-uri: ${auth-server}/oauth/check_token\r\n', 'fda9e8240ce33c6fd03040e35062746c', '2022-04-16 03:45:08', '2022-04-16 03:45:08', NULL, '172.18.0.1', '', 'd8339c99-a440-4074-8b0b-4a54cfebfa67', NULL, NULL, NULL, 'null', NULL);
INSERT INTO `config_info` VALUES (96, 'martin-biz-swagger-dev.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      client-id: client3\r\n      client-secret: 123456\r\n      scope: swagger\r\n      ignore-urls:\r\n        - /actuator/**', 'ff6687cf299058979ccc5eb55005b5d4', '2022-04-16 03:45:08', '2022-04-16 03:45:08', NULL, '172.18.0.1', '', 'd8339c99-a440-4074-8b0b-4a54cfebfa67', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (97, 'martin-biz-system-dev.yml', 'DEFAULT_GROUP', 'security:\n  oauth2:\n    client:\n      ignore-urls:\n        - /client/test\n        - /user/loadUserByUsername/*\n        - /log/add\n        - /user/loadDynamicSecurity\n        - /error\n        - /user/test1\n        - /menu/getCurrentUserMenusByRoles\n        - /user/currentUser\n        - /user/getUserByWechatOpenId\n        - /user/social/register\n\n \n        \n\n\nmartin:\n  feign:\n    secret: 123456789', '484544f0000323f04f925e2bd1069936', '2022-04-16 03:45:08', '2022-04-16 03:45:08', NULL, '172.18.0.1', '', 'd8339c99-a440-4074-8b0b-4a54cfebfa67', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (98, 'martin-cloud-gateway-dev.yml', 'DEFAULT_GROUP', 'spring:\n  cloud:\n    gateway:\n      discovery:\n        locator:\n          enabled: true\n          lowerCaseServiceId: true\n      routes:\n        - id: martin-biz-auth\n          uri: lb://martin-biz-auth\n          predicates:\n            - Path=/auth/**\n          filters:\n            - StripPrefix=1\n        - id: martin-biz-resource\n          uri: lb://martin-biz-resource\n          predicates:\n            - Path=/reso/**\n          filters:\n            - StripPrefix=1\n        - id: martin-biz-sso\n          uri: lb://martin-biz-sso\n          predicates:\n            - Path=/sso/**\n          filters:\n            - StripPrefix=1\n        - id: martin-biz-swagger\n          uri: lb://martin-biz-swagger\n          predicates:\n            - Path=/swag/**\n          filters:\n            - StripPrefix=1\n        - id: martin-biz-system\n          uri: lb://martin-biz-system\n          predicates:\n            - Path=/syst/**\n          filters:\n            - StripPrefix=1\n        - id: martin-extension-generator\n          uri: lb://martin-extension-generator\n          predicates:\n            - Path=/gene/**\n          filters:\n            - StripPrefix=1       \n        - id: martin-extension-quartz\n          uri: lb://martin-extension-quartz\n          predicates:\n            - Path=/quar/**\n          filters:\n            - StripPrefix=1  \n        - id: martin-extension-ncnb\n          uri: lb://martin-extension-ncnb\n          predicates:\n            - Path=/ncnb/**\n          filters:\n            - StripPrefix=1  ', '315544cbac463253321ce8de0dfbad68', '2022-04-16 03:45:08', '2022-04-16 03:45:08', NULL, '172.18.0.1', '', 'd8339c99-a440-4074-8b0b-4a54cfebfa67', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (99, 'martin-extension-generator-dev.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      ignore-urls:\r\n        - /actuator/**', 'f79b70a53d86ad29cccbfc80fba33bf8', '2022-04-16 03:45:08', '2022-04-16 03:45:08', NULL, '172.18.0.1', '', 'd8339c99-a440-4074-8b0b-4a54cfebfa67', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (100, 'martin-extension-skywalking-dev.yml', 'DEFAULT_GROUP', 'security:\n  oauth2:\n    client:\n      ignore-urls:\n        - /alarm/mail\n        - /actuator/**\n\n\n', '57337040640aaed21a9643c98b8e2fa8', '2022-04-16 03:45:08', '2022-04-16 03:45:08', NULL, '172.18.0.1', '', 'd8339c99-a440-4074-8b0b-4a54cfebfa67', NULL, NULL, NULL, 'text', NULL);
INSERT INTO `config_info` VALUES (101, 'martin-biz-system-sentinel', 'DEFAULT_GROUP', '[\r\n    {\r\n        \"resource\": \"/user/page\",\r\n        \"limitApp\": \"default\",\r\n        \"grade\": 1,\r\n        \"count\": 1,\r\n        \"strategy\": 0,\r\n        \"controlBehavior\": 0,\r\n        \"clusterMode\": false\r\n    },\r\n        {\r\n        \"resource\": \"/element/page\",\r\n        \"limitApp\": \"default\",\r\n        \"grade\": 1,\r\n        \"count\": 3,\r\n        \"strategy\": 0,\r\n        \"controlBehavior\": 0,\r\n        \"clusterMode\": false\r\n    }\r\n]\r\n', 'd211238460434e18222863e5277ca8ee', '2022-04-16 03:45:08', '2022-04-16 03:45:08', NULL, '172.18.0.1', '', 'd8339c99-a440-4074-8b0b-4a54cfebfa67', NULL, NULL, NULL, '', NULL);
INSERT INTO `config_info` VALUES (102, 'martin-extension-quartz-dev.yml', 'DEFAULT_GROUP', 'security:\n  oauth2:\n    client:\n      ignore-urls:\n        - /actuator/**\n        - /quartz/**\n\nspring:\n  quartz:\n    auto-startup: true\n    properties:\n      org:\n        quartz:\n          scheduler:\n            instanceName: MartinScheduler\n            instanceId: AUTO\n          jobStore:\n            class: org.quartz.impl.jdbcjobstore.JobStoreTX\n            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n            tablePrefix: QRTZ_\n            isClustered: false #是否使用集群\n            clusterCheckinInterval: 10000\n            useProperties: false\n          threadPool:\n            class: org.quartz.simpl.SimpleThreadPool\n            threadCount: 10\n            threadPriority: 5\n            threadsInheritContextClassLoaderOfInitializingThread: true\n    #数据库方式\n    job-store-type: jdbc\n    #初始化表结构\n    jdbc:\n      initialize-schema: never\n', 'd701ab28b38ff462c000e688496feb5c', '2022-04-16 03:45:08', '2022-04-16 03:45:08', NULL, '172.18.0.1', '', 'd8339c99-a440-4074-8b0b-4a54cfebfa67', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (103, 'martin-extension-ncnb-dev.yml', 'DEFAULT_GROUP', 'security:\n  oauth2:\n    client:\n      ignore-urls:\n        - /endpoint/**\n\n\nspring:\n  # 数据源\n  datasource:\n    url: jdbc:mysql://martin-mysql:3306/erd?useUnicode=true&useSSL=false&characterEncoding=utf8&serverTimezone=GMT%2B8\n    type: com.zaxxer.hikari.HikariDataSource\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: erd\n    password: erd\n\nmartin:\n  websocket:\n    enabled: false\n    enableSimpleBroker: /topic,/queue\n    applicationDestinationPrefixes: /app\n    endpoint: /endpoint\n    allowedOrigins: http://localhost:8000,http://localhost:9502,http://localhost:3000,http://erd-online:3000\n  socketio:\n    enabled: true\n    hostname: localhost\n    port: 9092\n    bossThreads: 0\n    workerThreads: 0\n    allowCustomRequests: false\n    upgradeTimeout: 10000\n    pingTimeout: 60000\n    pingInterval: 25000\n    firstDataTimeout: 5000\n    maxHttpContentLength: 65536\n    maxFramePayloadLength: 65536\n    sslProtocol: \"TLSv1\"\n    keyStoreFormat: \"JKS\"\n    trustStoreFormat: \"JKS\"\n    preferDirectBuffer: true\n    addVersionHeader: true\n    httpCompression: true\n    websocketCompression: true\n    randomSession: false\n    retryCount: 3', '522e74d019997d3c6f7a52465ac0bd7d', '2022-04-16 03:45:08', '2022-04-16 03:45:08', NULL, '172.18.0.1', '', 'd8339c99-a440-4074-8b0b-4a54cfebfa67', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (105, 'application.yml', 'DEFAULT_GROUP', 'martin:\n  swagger:\n    enabled: true\n  resource-server:\n    enabled: true\n  feign:\n    enabled: true\n    secret: 12345678\n  data:\n    enabled: true\n  message:\n    enabled: true\n  social:\n    enabled: false\n  oss:\n    enabled: true\n    type: 0\n    endpoint: http://localhost:9000/\n    accessKey: minio\n    secretKey: minio123\n  ui:\n    url: http://localhost:8000\n    #url: https://www.zerocode.net.cn\n\n\nribbon:\n  ReadTimeout: 10000\n  ConnectTimeout: 10000\n  ServerListRefreshInterval: 3000\n\n\n \n\n\nspring:\n  profiles:\n    active: dev\n  redis:\n    host: martin-redis\n    port: 6379\n    inetutils:\n      ignored-interfaces:\n        - docker0\n        - veth.*\n        - VM.*\n  servlet:\n    multipart:\n      # 根据实际需求作调整\n      # 默认最大上传文件大小为1M，单个文件大小\n      max-file-size: 10MB\n      # 默认最大请求大小为10M，总上传的数据大小\n      max-request-size: 15MB\n  # 数据源\n  datasource:\n    url: jdbc:mysql://martin-mysql:3306/martin?useUnicode=true&useSSL=false&characterEncoding=utf8&serverTimezone=GMT%2B8\n    type: com.zaxxer.hikari.HikariDataSource\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: martin\n    password: martin\n    #验证连接的有效性\n    test-while-idle: true\n    #空闲连接回收的时间间隔，与test-while-idle一起使用，设置5分钟\n    time-between-eviction-runs-millis: 300000\n    #连接池空闲连接的有效时间 ，设置30分钟\n    min-evictable-idle-time-millis: 1800000\n    #获取连接时候验证\n    test-on-borrow: true\n    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，\'wall\'用于防火墙\n    filters: stat,wall,slf4j\n    hikari:\n      ## 最小空闲连接数量\n      minimum-idle: 5\n      ## 空闲连接存活最大时间，默认600000（10分钟）\n      idle-timeout: 180000\n      ## 连接池最大连接数，默认是10\n      maximum-pool-size: 20\n      ## 此属性控制从池返回的连接的默认自动提交行为,默认值：true\n      auto-commit: true\n      ## 连接池母子\n      pool-name: MyHikariCP\n      ## 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认1800000即30分钟\n      max-lifetime: 1800000\n      ## 数据库连接超时时间,默认30秒，即30000\n      connection-timeout: 60000\n      connection-test-query: SELECT 1\n      #connection-test-query: select 1 from dual\n  boot:\n    admin:\n      client:\n        url: http://martin-extension-monitor:9601\n\n  cloud:\n    nacos:\n      metadata:\n        preserved.heart.beat.interval: 1000\n        preserved.heart.beat.timeout: 3000\n        preserved.ip.delete.timeout: 3000\n    sentinel:\n      transport:\n        # 配置Sentinel dashborad地址\n        dashboard: ${SENTINEL-DASHBOARD-HOST:martin-sentinel}:${SENTINEL-DASHBOARD-PORT:9604}\n        port: ${SENTINEL-PORT:8719}\n      # 取消Sentinel控制台懒加载\n      eager: true\n      # 添加Nacos数据源配置\n      datasource:\n        ds1-nacos:\n          nacos:\n            server-addr: ${spring.cloud.nacos.discovery.server-addr}\n            username: nacos\n            password: nacos\n            dataId: ${spring.application.name}-sentinel\n            groupId: DEFAULT_GROUP\n            data-type: json\n            rule-type: flow   \n\n\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \"*\"  \n  endpoint:\n    health:\n      show-details: ALWAYS\n\nfoot: foot\n\nauth-server: http://martin-cloud-gateway:9502/auth\n\n#本项目用一个资源配置，将来可为每个服务单独配置oauth信息\nsecurity:\n  oauth2:\n    client:\n      client-id: client2 # 授权服务器配置的client id\n      client-secret: 123456 # 授权服务器配置的client secret\n      scope: all\n      #access-token-uri: ${auth-server}/oauth/token # 获取access token接口\n      #user-authorization-uri: ${auth-server}/oauth/authorize #  获取Authorization Code接口\n    resource:\n      token-info-uri: ${auth-server}/oauth/check_token # 验证token的接口\n#      user-info-uri: ${auth-server}/user # 一个可以获取认证授权的自定义接口，可以在授权服务器，也可以在其他服务器上\n#      prefer-token-info: true # 如果同时配置了token-info-uri 和 user-info-uri，这个现象设置使用哪个取验证授权\n\n\nmybatis-plus:\n  # 如果是放在src/main/java目录下 classpath:/com/yourpackage/*/mapper/*Mapper.xml\n  # 如果是放在resource目录 classpath:/mapper/*Mapper.xml\n  mapper-locations: \n    - classpath:/mapper/**/*Mapper.xml\n    - classpath:/mapper/*Mapper.xml\n  #实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.java2e.martin.*.entity\n  global-config:\n    #主键类型  0:\"数据库ID自增\", 1:\"用户输入ID\",2:\"全局唯一ID (数字类型唯一ID)\", 3:\"全局唯一ID UUID\";\n    id-type: 3\n    #字段策略 0:\"忽略判断\",1:\"非 NULL 判断\"),2:\"非空判断\"\n    field-strategy: 2\n    #驼峰下划线转换\n    db-column-underline: true\n    #mp2.3+ 全局表前缀 mp_\n    #table-prefix: mp_\n    #刷新mapper 调试神器\n    is-refresh: true\n    #数据库大写下划线转换\n    #capital-mode: true\n    # Sequence序列接口实现类配置,oracle用\n    #key-generator: com.baomidou.mybatisplus.incrementer.OracleKeyGenerator\n    #逻辑删除配置（下面3个配置）\n    logic-delete-value: 1\n    logic-not-delete-value: 0\n    #sql-injector: com.baomidou.mybatisplus.mapper.LogicSqlInjector\n    #自定义填充策略接口实现\n    #meta-object-handler: com.baomidou.springboot.MyMetaObjectHandler\n  configuration:\n    #配置返回数据库(column下划线命名&&返回java实体是驼峰命名)，自动匹配无需as（没开启这个，SQL需要写as： select user_id as userId）\n    map-underscore-to-camel-case: true\n    cache-enabled: false\n    #配置JdbcTypeForNull, oracle数据库必须配置\n    jdbc-type-for-null: \'null\'\n    lazyLoadingEnabled: true #延时加载的开关\n    multipleResultSetsEnabled: true #开启的话，延时加载一个属性时会加载该对象全部属性，否则按需加载属性\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl #打印sql语句,调试用\n\n#swagger公共信息\nswagger:\n  host: localhost:9502\n  title: Amap Swagger API\n  description: Martin 聚合文档\n  version: 2.0\n  license: Powered By java2e\n  licenseUrl: http://java2e.com/\n  terms-of-service-url: http://java2e.com/\n  contact:\n    name: 狮少\n    email: liangcan.jxjy.edu@gmail.com\n    url: https://java2e.com/about.html\n  authorization:\n    name: Martin OAuth\n    auth-regex: ^.*$\n    authorization-scope-list:\n      - scope: server\n        description: server all\n    token-url-list:\n      - ${security.auth.server}/token\n\n\n\n', '0b1e72aea9ce62b0b7feff951aef0301', '2022-04-16 03:46:03', '2022-04-16 03:59:51', NULL, '172.18.0.1', '', 'd8339c99-a440-4074-8b0b-4a54cfebfa67', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (113, 'application-release.yml', 'DEFAULT_GROUP', 'martin:\n  swagger:\n    enabled: true\n  resource-server:\n    enabled: true\n  feign:\n    enabled: true\n    secret: 12345678\n  data:\n    enabled: true\n  message:\n    enabled: true\n  social:\n    enabled: false\n  websocket:\n    enabled: false\n  oss:\n    enabled: true\n    type: 0\n    endpoint: http://localhost:9000/\n    accessKey: minio\n    secretKey: minio123\n  ui:\n    url: https://www.zerocode.net.cn\n\n\nribbon:\n  ReadTimeout: 10000\n  ConnectTimeout: 10000\n  ServerListRefreshInterval: 3000\n\n\n \n\n\nspring:\n  profiles:\n    active: dev\n  redis:\n    host: erd-redis\n    port: 6379\n    inetutils:\n      ignored-interfaces:\n        - docker0\n        - veth.*\n        - VM.*\n  servlet:\n    multipart:\n      # 根据实际需求作调整\n      # 默认最大上传文件大小为1M，单个文件大小\n      max-file-size: 10MB\n      # 默认最大请求大小为10M，总上传的数据大小\n      max-request-size: 15MB\n  # 数据源\n  datasource:\n    url: jdbc:mysql://erd-mysql:3306/martin?useUnicode=true&useSSL=false&characterEncoding=utf8&serverTimezone=GMT%2B8\n    type: com.zaxxer.hikari.HikariDataSource\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: martin\n    password: ~!LCmartin\n    #验证连接的有效性\n    test-while-idle: true\n    #空闲连接回收的时间间隔，与test-while-idle一起使用，设置5分钟\n    time-between-eviction-runs-millis: 300000\n    #连接池空闲连接的有效时间 ，设置30分钟\n    min-evictable-idle-time-millis: 1800000\n    #获取连接时候验证\n    test-on-borrow: true\n    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，\'wall\'用于防火墙\n    filters: stat,wall,slf4j\n    hikari:\n      ## 最小空闲连接数量\n      minimum-idle: 5\n      ## 空闲连接存活最大时间，默认600000（10分钟）\n      idle-timeout: 180000\n      ## 连接池最大连接数，默认是10\n      maximum-pool-size: 20\n      ## 此属性控制从池返回的连接的默认自动提交行为,默认值：true\n      auto-commit: true\n      ## 连接池母子\n      pool-name: MyHikariCP\n      ## 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认1800000即30分钟\n      max-lifetime: 1800000\n      ## 数据库连接超时时间,默认30秒，即30000\n      connection-timeout: 60000\n      connection-test-query: SELECT 1\n      #connection-test-query: select 1 from dual\n  boot:\n    admin:\n      client:\n        url: http://erd-monitor:9601\n\n  cloud:\n    nacos:\n      metadata:\n        preserved.heart.beat.interval: 1000\n        preserved.heart.beat.timeout: 3000\n        preserved.ip.delete.timeout: 3000\n    sentinel:\n      transport:\n        # 配置Sentinel dashborad地址\n        dashboard: ${SENTINEL-DASHBOARD-HOST:martin-sentinel}:${SENTINEL-DASHBOARD-PORT:9604}\n        port: ${SENTINEL-PORT:8719}\n      # 取消Sentinel控制台懒加载\n      eager: true\n      # 添加Nacos数据源配置\n      datasource:\n        ds1-nacos:\n          nacos:\n            server-addr: ${spring.cloud.nacos.discovery.server-addr}\n            username: nacos\n            password: LCerdonline\n            dataId: ${spring.application.name}-sentinel\n            groupId: DEFAULT_GROUP\n            data-type: json\n            rule-type: flow   \n\n\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \"*\"  \n  endpoint:\n    health:\n      show-details: ALWAYS\n\nfoot: foot\n\nauth-server: http://erd-gateway:9502/auth\n\n#本项目用一个资源配置，将来可为每个服务单独配置oauth信息\nsecurity:\n  oauth2:\n    client:\n      client-id: client2 # 授权服务器配置的client id\n      client-secret: 123456 # 授权服务器配置的client secret\n      scope: all\n      #access-token-uri: ${auth-server}/oauth/token # 获取access token接口\n      #user-authorization-uri: ${auth-server}/oauth/authorize #  获取Authorization Code接口\n    resource:\n      token-info-uri: ${auth-server}/oauth/check_token # 验证token的接口\n#      user-info-uri: ${auth-server}/user # 一个可以获取认证授权的自定义接口，可以在授权服务器，也可以在其他服务器上\n#      prefer-token-info: true # 如果同时配置了token-info-uri 和 user-info-uri，这个现象设置使用哪个取验证授权\n\n\nmybatis-plus:\n  # 如果是放在src/main/java目录下 classpath:/com/yourpackage/*/mapper/*Mapper.xml\n  # 如果是放在resource目录 classpath:/mapper/*Mapper.xml\n  mapper-locations: \n    - classpath:/mapper/**/*Mapper.xml\n    - classpath:/mapper/*Mapper.xml\n  #实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.java2e.martin.*.entity\n  global-config:\n    #主键类型  0:\"数据库ID自增\", 1:\"用户输入ID\",2:\"全局唯一ID (数字类型唯一ID)\", 3:\"全局唯一ID UUID\";\n    id-type: 3\n    #字段策略 0:\"忽略判断\",1:\"非 NULL 判断\"),2:\"非空判断\"\n    field-strategy: 2\n    #驼峰下划线转换\n    db-column-underline: true\n    #mp2.3+ 全局表前缀 mp_\n    #table-prefix: mp_\n    #刷新mapper 调试神器\n    is-refresh: true\n    #数据库大写下划线转换\n    #capital-mode: true\n    # Sequence序列接口实现类配置,oracle用\n    #key-generator: com.baomidou.mybatisplus.incrementer.OracleKeyGenerator\n    #逻辑删除配置（下面3个配置）\n    logic-delete-value: 1\n    logic-not-delete-value: 0\n    #sql-injector: com.baomidou.mybatisplus.mapper.LogicSqlInjector\n    #自定义填充策略接口实现\n    #meta-object-handler: com.baomidou.springboot.MyMetaObjectHandler\n  configuration:\n    #配置返回数据库(column下划线命名&&返回java实体是驼峰命名)，自动匹配无需as（没开启这个，SQL需要写as： select user_id as userId）\n    map-underscore-to-camel-case: true\n    cache-enabled: false\n    #配置JdbcTypeForNull, oracle数据库必须配置\n    jdbc-type-for-null: \'null\'\n    lazyLoadingEnabled: true #延时加载的开关\n    multipleResultSetsEnabled: true #开启的话，延时加载一个属性时会加载该对象全部属性，否则按需加载属性\n\n#swagger公共信息\nswagger:\n  host: localhost:9502\n  title: Amap Swagger API\n  description: Martin 聚合文档\n  version: 2.0\n  license: Powered By java2e\n  licenseUrl: http://java2e.com/\n  terms-of-service-url: http://java2e.com/\n  contact:\n    name: 狮少\n    email: liangcan.jxjy.edu@gmail.com\n    url: https://java2e.com/about.html\n  authorization:\n    name: Martin OAuth\n    auth-regex: ^.*$\n    authorization-scope-list:\n      - scope: server\n        description: server all\n    token-url-list:\n      - ${security.auth.server}/token\n\n\n\n', '759cef91f0f49d5d76df1835486f534e', '2022-04-16 05:01:34', '2022-04-16 16:16:55', '', '172.18.0.1', '', 'release', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (115, 'martin-biz-resource-release.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      client-id: client2 # 授权服务器配置的client id\r\n      client-secret: 123456 # 授权服务器配置的client secret\r\n      scope: select\r\n      ignore-urls:\r\n        - /test\r\n        - /actuator/**\r\n      #access-token-uri: ${auth-server}/oauth/token # 获取access token接口\r\n      #user-authorization-uri: ${auth-server}/oauth/authorize #  获取Authorization Code接口\r\n    resource:\r\n      token-info-uri: ${auth-server}/oauth/check_token # 验证token的接口\r\n#      user-info-uri: ${auth-server}/user # 一个可以获取认证授权的自定义接口，可以在授权服务器，也可以在其他服务器上\r\n#      prefer-token-info: true # 如果同时配置了token-info-uri 和 user-info-uri，这个现象设置使用哪个取验证授权\r\n', '01a2f8e2736bf09d5eb420b12a20f4e5', '2022-04-16 05:01:34', '2022-04-16 05:01:34', NULL, '172.18.0.1', '', 'release', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (116, 'martin-biz-sso-release.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      client-id: client3\r\n      client-secret: 123456\r\n      scope: sso\r\n      ignore-urls:\r\n        - /client/test\r\n        - /actuator/**\r\n      access-token-uri: ${auth-server}/oauth/token\r\n      user-authorization-uri: ${auth-server}/oauth/authorize\r\n    resource:\r\n      token-info-uri: ${auth-server}/oauth/check_token\r\n', 'fda9e8240ce33c6fd03040e35062746c', '2022-04-16 05:01:34', '2022-04-16 05:01:34', NULL, '172.18.0.1', '', 'release', NULL, NULL, NULL, 'null', NULL);
INSERT INTO `config_info` VALUES (117, 'martin-biz-swagger-release.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      client-id: client3\r\n      client-secret: 123456\r\n      scope: swagger\r\n      ignore-urls:\r\n        - /actuator/**', 'ff6687cf299058979ccc5eb55005b5d4', '2022-04-16 05:01:34', '2022-04-16 05:01:34', NULL, '172.18.0.1', '', 'release', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (118, 'martin-biz-system-release.yml', 'DEFAULT_GROUP', 'security:\n  oauth2:\n    client:\n      ignore-urls:\n        - /client/test\n        - /user/loadUserByUsername/*\n        - /log/add\n        - /user/loadDynamicSecurity\n        - /error\n        - /user/test1\n        - /menu/getCurrentUserMenusByRoles\n        - /user/currentUser\n        - /user/getUserByWechatOpenId\n        - /user/social/register\n\n \n        \n\n\nmartin:\n  feign:\n    secret: 123456789', '484544f0000323f04f925e2bd1069936', '2022-04-16 05:01:34', '2022-04-16 05:01:34', NULL, '172.18.0.1', '', 'release', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (119, 'martin-cloud-gateway-release.yml', 'DEFAULT_GROUP', 'spring:\n  cloud:\n    gateway:\n      discovery:\n        locator:\n          enabled: true\n          lowerCaseServiceId: true\n      routes:\n        - id: martin-biz-auth\n          uri: lb://martin-biz-auth\n          predicates:\n            - Path=/auth/**\n          filters:\n            - StripPrefix=1\n        - id: martin-biz-resource\n          uri: lb://martin-biz-resource\n          predicates:\n            - Path=/reso/**\n          filters:\n            - StripPrefix=1\n        - id: martin-biz-sso\n          uri: lb://martin-biz-sso\n          predicates:\n            - Path=/sso/**\n          filters:\n            - StripPrefix=1\n        - id: martin-biz-swagger\n          uri: lb://martin-biz-swagger\n          predicates:\n            - Path=/swag/**\n          filters:\n            - StripPrefix=1\n        - id: martin-biz-system\n          uri: lb://martin-biz-system\n          predicates:\n            - Path=/syst/**\n          filters:\n            - StripPrefix=1\n        - id: martin-extension-generator\n          uri: lb://martin-extension-generator\n          predicates:\n            - Path=/gene/**\n          filters:\n            - StripPrefix=1       \n        - id: martin-extension-quartz\n          uri: lb://martin-extension-quartz\n          predicates:\n            - Path=/quar/**\n          filters:\n            - StripPrefix=1  \n        - id: martin-extension-ncnb\n          uri: lb://martin-extension-ncnb\n          predicates:\n            - Path=/ncnb/**\n          filters:\n            - StripPrefix=1  \n\nmanagement:\n  endpoints:\n    enabled-by-default: false', '6a01a3df915f7c2e5841d3e6dab85c11', '2022-04-16 05:01:34', '2022-04-16 06:42:34', NULL, '172.18.0.1', '', 'release', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (120, 'martin-extension-generator-release.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      ignore-urls:\r\n        - /actuator/**', 'f79b70a53d86ad29cccbfc80fba33bf8', '2022-04-16 05:01:34', '2022-04-16 05:01:34', NULL, '172.18.0.1', '', 'release', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (121, 'martin-extension-skywalking-release.yml', 'DEFAULT_GROUP', 'security:\n  oauth2:\n    client:\n      ignore-urls:\n        - /alarm/mail\n        - /actuator/**\n\n\n', '57337040640aaed21a9643c98b8e2fa8', '2022-04-16 05:01:34', '2022-04-16 05:01:34', NULL, '172.18.0.1', '', 'release', NULL, NULL, NULL, 'text', NULL);
INSERT INTO `config_info` VALUES (122, 'martin-biz-system-sentinel', 'DEFAULT_GROUP', '[\r\n    {\r\n        \"resource\": \"/user/page\",\r\n        \"limitApp\": \"default\",\r\n        \"grade\": 1,\r\n        \"count\": 1,\r\n        \"strategy\": 0,\r\n        \"controlBehavior\": 0,\r\n        \"clusterMode\": false\r\n    },\r\n        {\r\n        \"resource\": \"/element/page\",\r\n        \"limitApp\": \"default\",\r\n        \"grade\": 1,\r\n        \"count\": 3,\r\n        \"strategy\": 0,\r\n        \"controlBehavior\": 0,\r\n        \"clusterMode\": false\r\n    }\r\n]\r\n', 'd211238460434e18222863e5277ca8ee', '2022-04-16 05:01:34', '2022-04-16 05:01:34', NULL, '172.18.0.1', '', 'release', NULL, NULL, NULL, '', NULL);
INSERT INTO `config_info` VALUES (123, 'martin-extension-quartz-release.yml', 'DEFAULT_GROUP', 'security:\n  oauth2:\n    client:\n      ignore-urls:\n        - /actuator/**\n        - /quartz/**\n\nspring:\n  quartz:\n    auto-startup: true\n    properties:\n      org:\n        quartz:\n          scheduler:\n            instanceName: MartinScheduler\n            instanceId: AUTO\n          jobStore:\n            class: org.quartz.impl.jdbcjobstore.JobStoreTX\n            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n            tablePrefix: QRTZ_\n            isClustered: false #是否使用集群\n            clusterCheckinInterval: 10000\n            useProperties: false\n          threadPool:\n            class: org.quartz.simpl.SimpleThreadPool\n            threadCount: 10\n            threadPriority: 5\n            threadsInheritContextClassLoaderOfInitializingThread: true\n    #数据库方式\n    job-store-type: jdbc\n    #初始化表结构\n    jdbc:\n      initialize-schema: never\n', 'd701ab28b38ff462c000e688496feb5c', '2022-04-16 05:01:34', '2022-04-16 05:01:34', NULL, '172.18.0.1', '', 'release', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (124, 'martin-extension-ncnb-release.yml', 'DEFAULT_GROUP', 'security:\n  oauth2:\n    client:\n      ignore-urls:\n        - /endpoint/**\n\n\nspring:\n  # 数据源\n  datasource:\n    url: jdbc:mysql://martin-mysql:3306/erd?useUnicode=true&useSSL=false&characterEncoding=utf8&serverTimezone=GMT%2B8\n    type: com.zaxxer.hikari.HikariDataSource\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: erd\n    password: erd\n\nmartin:\n  websocket:\n    enabled: false\n    enableSimpleBroker: /topic,/queue\n    applicationDestinationPrefixes: /app\n    endpoint: /endpoint\n    allowedOrigins: http://localhost:8000,http://localhost:9502,http://localhost:3000,http://erd-online:3000\n  socketio:\n    enabled: true\n    hostname: localhost\n    port: 9092\n    bossThreads: 0\n    workerThreads: 0\n    allowCustomRequests: false\n    upgradeTimeout: 10000\n    pingTimeout: 60000\n    pingInterval: 25000\n    firstDataTimeout: 5000\n    maxHttpContentLength: 65536\n    maxFramePayloadLength: 65536\n    sslProtocol: \"TLSv1\"\n    keyStoreFormat: \"JKS\"\n    trustStoreFormat: \"JKS\"\n    preferDirectBuffer: true\n    addVersionHeader: true\n    httpCompression: true\n    websocketCompression: true\n    randomSession: false\n    retryCount: 3', '522e74d019997d3c6f7a52465ac0bd7d', '2022-04-16 05:01:34', '2022-04-16 05:01:34', NULL, '172.18.0.1', '', 'release', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (181, 'application-dev.yml', 'DEFAULT_GROUP', 'martin:\n  swagger:\n    enabled: true\n  resource-server:\n    enabled: true\n  feign:\n    enabled: true\n    secret: 12345678\n  data:\n    enabled: true\n  message:\n    enabled: true\n  social:\n    enabled: false\n  websocket:\n    enabled: false\n  oss:\n    enabled: true\n    type: 0\n    endpoint: http://localhost:9000/\n    accessKey: minio\n    secretKey: minio123\n  ui:\n    url: http://localhost:8000\n\n\nribbon:\n  ReadTimeout: 10000\n  ConnectTimeout: 10000\n  ServerListRefreshInterval: 3000\n\nspring:\n  profiles:\n    active: dev\n  redis:\n    host: martin-redis\n    port: 6379\n    inetutils:\n      ignored-interfaces:\n        - docker0\n        - veth.*\n        - VM.*\n  servlet:\n    multipart:\n      # 根据实际需求作调整\n      # 默认最大上传文件大小为1M，单个文件大小\n      max-file-size: 10MB\n      # 默认最大请求大小为10M，总上传的数据大小\n      max-request-size: 15MB\n  # 数据源\n  datasource:\n    url: jdbc:mysql://martin-mysql:3306/martin?useUnicode=true&useSSL=false&characterEncoding=utf8&serverTimezone=GMT%2B8&allowPublicKeyRetrieval=true\n    type: com.zaxxer.hikari.HikariDataSource\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: martin\n    password: ~!LCmartin\n    #验证连接的有效性\n    test-while-idle: true\n    #空闲连接回收的时间间隔，与test-while-idle一起使用，设置5分钟\n    time-between-eviction-runs-millis: 300000\n    #连接池空闲连接的有效时间 ，设置30分钟\n    min-evictable-idle-time-millis: 1800000\n    #获取连接时候验证\n    test-on-borrow: true\n    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，\'wall\'用于防火墙\n    filters: stat,wall,slf4j\n    hikari:\n      ## 最小空闲连接数量\n      minimum-idle: 5\n      ## 空闲连接存活最大时间，默认600000（10分钟）\n      idle-timeout: 180000\n      ## 连接池最大连接数，默认是10\n      maximum-pool-size: 20\n      ## 此属性控制从池返回的连接的默认自动提交行为,默认值：true\n      auto-commit: true\n      ## 连接池母子\n      pool-name: MyHikariCP\n      ## 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认1800000即30分钟\n      max-lifetime: 1800000\n      ## 数据库连接超时时间,默认30秒，即30000\n      connection-timeout: 60000\n      connection-test-query: SELECT 1\n      #connection-test-query: select 1 from dual\n  boot:\n    admin:\n      client:\n        url: http://erd-monitor:9601\n\n  cloud:\n    nacos:\n      metadata:\n        preserved.heart.beat.interval: 1000\n        preserved.heart.beat.timeout: 3000\n        preserved.ip.delete.timeout: 3000\n    sentinel:\n      transport:\n        # 配置Sentinel dashborad地址\n        dashboard: ${SENTINEL-DASHBOARD-HOST:martin-sentinel}:${SENTINEL-DASHBOARD-PORT:9604}\n        port: ${SENTINEL-PORT:8719}\n      # 取消Sentinel控制台懒加载\n      eager: true\n      # 添加Nacos数据源配置\n      datasource:\n        ds1-nacos:\n          nacos:\n            server-addr: ${spring.cloud.nacos.discovery.server-addr}\n            username: nacos\n            password: LCerdonline\n            dataId: ${spring.application.name}-sentinel\n            groupId: DEFAULT_GROUP\n            data-type: json\n            rule-type: flow   \n\n\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \"*\"  \n  endpoint:\n    health:\n      show-details: ALWAYS\n\nfoot: foot\n\nauth-server: http://martin-cloud-gateway:9502/auth\n\n#本项目用一个资源配置，将来可为每个服务单独配置oauth信息\nsecurity:\n  oauth2:\n    client:\n      client-id: client2 # 授权服务器配置的client id\n      client-secret: 123456 # 授权服务器配置的client secret\n      scope: all\n      #access-token-uri: ${auth-server}/oauth/token # 获取access token接口\n      #user-authorization-uri: ${auth-server}/oauth/authorize #  获取Authorization Code接口\n    resource:\n      token-info-uri: ${auth-server}/oauth/check_token # 验证token的接口\n#      user-info-uri: ${auth-server}/user # 一个可以获取认证授权的自定义接口，可以在授权服务器，也可以在其他服务器上\n#      prefer-token-info: true # 如果同时配置了token-info-uri 和 user-info-uri，这个现象设置使用哪个取验证授权\n\n\nmybatis-plus:\n  # 如果是放在src/main/java目录下 classpath:/com/yourpackage/*/mapper/*Mapper.xml\n  # 如果是放在resource目录 classpath:/mapper/*Mapper.xml\n  mapper-locations: \n    - classpath:/mapper/**/*Mapper.xml\n    - classpath:/mapper/*Mapper.xml\n  #实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.java2e.martin.*.entity\n  global-config:\n    #主键类型  0:\"数据库ID自增\", 1:\"用户输入ID\",2:\"全局唯一ID (数字类型唯一ID)\", 3:\"全局唯一ID UUID\";\n    id-type: 3\n    #字段策略 0:\"忽略判断\",1:\"非 NULL 判断\"),2:\"非空判断\"\n    field-strategy: 2\n    #驼峰下划线转换\n    db-column-underline: true\n    #mp2.3+ 全局表前缀 mp_\n    #table-prefix: mp_\n    #刷新mapper 调试神器\n    is-refresh: true\n    #数据库大写下划线转换\n    #capital-mode: true\n    # Sequence序列接口实现类配置,oracle用\n    #key-generator: com.baomidou.mybatisplus.incrementer.OracleKeyGenerator\n    #逻辑删除配置（下面3个配置）\n    logic-delete-value: 1\n    logic-not-delete-value: 0\n    #sql-injector: com.baomidou.mybatisplus.mapper.LogicSqlInjector\n    #自定义填充策略接口实现\n    #meta-object-handler: com.baomidou.springboot.MyMetaObjectHandler\n  configuration:\n    #配置返回数据库(column下划线命名&&返回java实体是驼峰命名)，自动匹配无需as（没开启这个，SQL需要写as： select user_id as userId）\n    map-underscore-to-camel-case: true\n    cache-enabled: false\n    #配置JdbcTypeForNull, oracle数据库必须配置\n    jdbc-type-for-null: \'null\'\n    lazyLoadingEnabled: true #延时加载的开关\n    multipleResultSetsEnabled: true #开启的话，延时加载一个属性时会加载该对象全部属性，否则按需加载属性\n\n#swagger公共信息\nswagger:\n  host: localhost:9502\n  title: Amap Swagger API\n  description: Martin 聚合文档\n  version: 2.0\n  license: Powered By java2e\n  licenseUrl: http://java2e.com/\n  terms-of-service-url: http://java2e.com/\n  contact:\n    name: 狮少\n    email: liangcan.jxjy.edu@gmail.com\n    url: https://java2e.com/about.html\n  authorization:\n    name: Martin OAuth\n    auth-regex: ^.*$\n    authorization-scope-list:\n      - scope: server\n        description: server all\n    token-url-list:\n      - ${security.auth.server}/token\n\n\n\n', 'cc7934741597b109e4024204e1309d4a', '2022-04-17 13:17:40', '2022-04-18 04:02:39', NULL, '172.18.0.1', '', 'dev', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (183, 'martin-biz-resource-dev.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      client-id: client2 # 授权服务器配置的client id\r\n      client-secret: 123456 # 授权服务器配置的client secret\r\n      scope: select\r\n      ignore-urls:\r\n        - /test\r\n        - /actuator/**\r\n      #access-token-uri: ${auth-server}/oauth/token # 获取access token接口\r\n      #user-authorization-uri: ${auth-server}/oauth/authorize #  获取Authorization Code接口\r\n    resource:\r\n      token-info-uri: ${auth-server}/oauth/check_token # 验证token的接口\r\n#      user-info-uri: ${auth-server}/user # 一个可以获取认证授权的自定义接口，可以在授权服务器，也可以在其他服务器上\r\n#      prefer-token-info: true # 如果同时配置了token-info-uri 和 user-info-uri，这个现象设置使用哪个取验证授权\r\n', '01a2f8e2736bf09d5eb420b12a20f4e5', '2022-04-17 13:17:40', '2022-04-17 13:17:40', NULL, '172.18.0.1', '', 'dev', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (184, 'martin-biz-sso-dev.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      client-id: client3\r\n      client-secret: 123456\r\n      scope: sso\r\n      ignore-urls:\r\n        - /client/test\r\n        - /actuator/**\r\n      access-token-uri: ${auth-server}/oauth/token\r\n      user-authorization-uri: ${auth-server}/oauth/authorize\r\n    resource:\r\n      token-info-uri: ${auth-server}/oauth/check_token\r\n', 'fda9e8240ce33c6fd03040e35062746c', '2022-04-17 13:17:40', '2022-04-17 13:17:40', NULL, '172.18.0.1', '', 'dev', NULL, NULL, NULL, 'null', NULL);
INSERT INTO `config_info` VALUES (185, 'martin-biz-swagger-dev.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      client-id: client3\r\n      client-secret: 123456\r\n      scope: swagger\r\n      ignore-urls:\r\n        - /actuator/**', 'ff6687cf299058979ccc5eb55005b5d4', '2022-04-17 13:17:40', '2022-04-17 13:17:40', NULL, '172.18.0.1', '', 'dev', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (186, 'martin-biz-system-dev.yml', 'DEFAULT_GROUP', 'security:\n  oauth2:\n    client:\n      ignore-urls:\n        - /client/test\n        - /user/loadUserByUsername/*\n        - /log/add\n        - /user/loadDynamicSecurity\n        - /error\n        - /user/test1\n        - /menu/getCurrentUserMenusByRoles\n        - /user/currentUser\n        - /user/getUserByWechatOpenId\n        - /user/social/register\n\n \n        \n\n\nmartin:\n  feign:\n    enabled: true\n    secret: 12345678', '9cd020fa9dc74ae4afefeb0b4c31ac26', '2022-04-17 13:17:40', '2022-04-18 03:43:40', NULL, '172.18.0.1', '', 'dev', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (187, 'martin-cloud-gateway-dev.yml', 'DEFAULT_GROUP', 'spring:\n  cloud:\n    gateway:\n      discovery:\n        locator:\n          enabled: true\n          lowerCaseServiceId: true\n      routes:\n        - id: martin-biz-auth\n          uri: lb://martin-biz-auth\n          predicates:\n            - Path=/auth/**\n          filters:\n            - StripPrefix=1\n        - id: martin-biz-resource\n          uri: lb://martin-biz-resource\n          predicates:\n            - Path=/reso/**\n          filters:\n            - StripPrefix=1\n        - id: martin-biz-sso\n          uri: lb://martin-biz-sso\n          predicates:\n            - Path=/sso/**\n          filters:\n            - StripPrefix=1\n        - id: martin-biz-swagger\n          uri: lb://martin-biz-swagger\n          predicates:\n            - Path=/swag/**\n          filters:\n            - StripPrefix=1\n        - id: martin-biz-system\n          uri: lb://martin-biz-system\n          predicates:\n            - Path=/syst/**\n          filters:\n            - StripPrefix=1\n        - id: martin-extension-generator\n          uri: lb://martin-extension-generator\n          predicates:\n            - Path=/gene/**\n          filters:\n            - StripPrefix=1       \n        - id: martin-extension-quartz\n          uri: lb://martin-extension-quartz\n          predicates:\n            - Path=/quar/**\n          filters:\n            - StripPrefix=1  \n        - id: martin-extension-ncnb\n          uri: lb://martin-extension-ncnb\n          predicates:\n            - Path=/ncnb/**\n          filters:\n            - StripPrefix=1  \n\nmanagement:\n  endpoints:\n    enabled-by-default: false', '6a01a3df915f7c2e5841d3e6dab85c11', '2022-04-17 13:17:40', '2022-04-17 13:17:40', NULL, '172.18.0.1', '', 'dev', '', NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (188, 'martin-extension-generator-dev.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      ignore-urls:\r\n        - /actuator/**', 'f79b70a53d86ad29cccbfc80fba33bf8', '2022-04-17 13:17:40', '2022-04-17 13:17:40', NULL, '172.18.0.1', '', 'dev', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (189, 'martin-extension-skywalking-dev.yml', 'DEFAULT_GROUP', 'security:\n  oauth2:\n    client:\n      ignore-urls:\n        - /alarm/mail\n        - /actuator/**\n\n\n', '57337040640aaed21a9643c98b8e2fa8', '2022-04-17 13:17:40', '2022-04-17 13:17:40', NULL, '172.18.0.1', '', 'dev', NULL, NULL, NULL, 'text', NULL);
INSERT INTO `config_info` VALUES (190, 'martin-biz-system-sentinel-dev', 'DEFAULT_GROUP', '[\r\n    {\r\n        \"resource\": \"/user/page\",\r\n        \"limitApp\": \"default\",\r\n        \"grade\": 1,\r\n        \"count\": 1,\r\n        \"strategy\": 0,\r\n        \"controlBehavior\": 0,\r\n        \"clusterMode\": false\r\n    },\r\n        {\r\n        \"resource\": \"/element/page\",\r\n        \"limitApp\": \"default\",\r\n        \"grade\": 1,\r\n        \"count\": 3,\r\n        \"strategy\": 0,\r\n        \"controlBehavior\": 0,\r\n        \"clusterMode\": false\r\n    }\r\n]\r\n', 'd211238460434e18222863e5277ca8ee', '2022-04-17 13:17:40', '2022-04-17 13:17:40', NULL, '172.18.0.1', '', 'dev', NULL, NULL, NULL, 'text', NULL);
INSERT INTO `config_info` VALUES (191, 'martin-extension-quartz-dev.yml', 'DEFAULT_GROUP', 'security:\n  oauth2:\n    client:\n      ignore-urls:\n        - /actuator/**\n        - /quartz/**\n\nspring:\n  quartz:\n    auto-startup: true\n    properties:\n      org:\n        quartz:\n          scheduler:\n            instanceName: MartinScheduler\n            instanceId: AUTO\n          jobStore:\n            class: org.quartz.impl.jdbcjobstore.JobStoreTX\n            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n            tablePrefix: QRTZ_\n            isClustered: false #是否使用集群\n            clusterCheckinInterval: 10000\n            useProperties: false\n          threadPool:\n            class: org.quartz.simpl.SimpleThreadPool\n            threadCount: 10\n            threadPriority: 5\n            threadsInheritContextClassLoaderOfInitializingThread: true\n    #数据库方式\n    job-store-type: jdbc\n    #初始化表结构\n    jdbc:\n      initialize-schema: never\n', 'd701ab28b38ff462c000e688496feb5c', '2022-04-17 13:17:40', '2022-04-17 13:17:40', NULL, '172.18.0.1', '', 'dev', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (192, 'martin-extension-ncnb-dev.yml', 'DEFAULT_GROUP', 'security:\n  oauth2:\n    client:\n      ignore-urls:\n        - /endpoint/**\n\n\nspring:\n  # 数据源\n  datasource:\n    url: jdbc:mysql://martin-mysql:3306/erd?useUnicode=true&useSSL=false&characterEncoding=utf8&serverTimezone=GMT%2B8&allowPublicKeyRetrieval=true\n    type: com.zaxxer.hikari.HikariDataSource\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: erd\n    password: ~!LCerd\n\nmartin:\n  websocket:\n    enabled: false\n    enableSimpleBroker: /topic,/queue\n    applicationDestinationPrefixes: /app\n    endpoint: /endpoint\n    allowedOrigins: http://localhost:8000,http://localhost:9502,http://localhost:3000,http://erd-online:3000\n  socketio:\n    enabled: true\n    hostname: localhost\n    port: 9092\n    bossThreads: 0\n    workerThreads: 0\n    allowCustomRequests: false\n    upgradeTimeout: 10000\n    pingTimeout: 60000\n    pingInterval: 25000\n    firstDataTimeout: 5000\n    maxHttpContentLength: 65536\n    maxFramePayloadLength: 65536\n    sslProtocol: \"TLSv1\"\n    keyStoreFormat: \"JKS\"\n    trustStoreFormat: \"JKS\"\n    preferDirectBuffer: true\n    addVersionHeader: true\n    httpCompression: true\n    websocketCompression: true\n    randomSession: false\n    retryCount: 3', '5c5c071774f470b8104c6723b686112b', '2022-04-17 13:17:40', '2022-04-17 13:31:40', '', '172.18.0.1', '', 'dev', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (204, 'application-dev.yml', 'DEFAULT_GROUP', 'martin:\n  swagger:\n    enabled: true\n  resource-server:\n    enabled: true\n  feign:\n    enabled: true\n    secret: 12345678\n  data:\n    enabled: true\n  message:\n    enabled: true\n  social:\n    enabled: false\n  websocket:\n    enabled: false\n  oss:\n    enabled: true\n    type: 0\n    endpoint: http://localhost:9000/\n    accessKey: minio\n    secretKey: minio123\n  ui:\n    url: ${ERD_UI_URL}\n\n\nribbon:\n  ReadTimeout: 10000\n  ConnectTimeout: 10000\n  ServerListRefreshInterval: 3000\n\n\n \n\n\nspring:\n  profiles:\n    active: dev\n  redis:\n    host: erd-redis\n    port: 6379\n    inetutils:\n      ignored-interfaces:\n        - docker0\n        - veth.*\n        - VM.*\n  servlet:\n    multipart:\n      # 根据实际需求作调整\n      # 默认最大上传文件大小为1M，单个文件大小\n      max-file-size: 10MB\n      # 默认最大请求大小为10M，总上传的数据大小\n      max-request-size: 15MB\n  # 数据源\n  datasource:\n    url: jdbc:mysql://${ERD_MYSQL}:${ERD_MYSQL_PORT}/${ERD_MYSQL_MARTIN_DB}?useUnicode=true&useSSL=false&characterEncoding=utf8&serverTimezone=GMT%2B8&allowPublicKeyRetrieval=true\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: ${ERD_MYSQL_MARTIN_USER}\n    password: ${ERD_MYSQL_MARTIN_PASSWORD}\n    type: com.alibaba.druid.pool.DruidDataSource\n    # druid相关配置\n    druid:\n      # 初始化 最小 最大\n      initial-size: 5\n      min-idle: 5\n      max-active: 20\n      # 配置获取连接等待超时的时间\n      max-wait: 60000\n      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\n      time-between-eviction-runs-millis: 60000\n      # 配置一个连接在池中最小生存的时间，单位是毫秒\n      min-evictable-idle-time-millis: 300000\n      validation-query: SELECT \'x\'\n      test-while-idle: true\n      test-on-borrow: false\n      test-on-return: false\n      # 打开PSCache，并且指定每个连接上PSCache的大小\n      poolPreparedStatements: true\n      maxPoolPreparedStatementPerConnectionSize: 20\n      # 配置多个英文逗号分隔\n      filters: stat,wall\n      # WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter\n      # 是否启用StatFilter默认值true\n      web-stat-filter:\n        enabled: true\n        url-pattern: /*\n        exclusions: \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\"\n        session-stat-enable: false\n        session-stat-max-count: 1000\n        principal-cookie-name: admin\n        principal-session-name: admin\n        profile-enable: true\n      # 根据配置中的url-pattern来访问内置监控页面，如果是上面的配置，内置监控页面的首页是/druid/index.html\n      # http://loacalhsot:8081/druid\n      stat-view-servlet:\n        enabled: true\n        url-pattern: /druid/*  # 监控页面访问路径\n        # 允许清空统计数据\n        reset-enable: true\n        login-username: erd\n        login-password: ~!LCDruid\n        # StatViewSerlvet展示出来的监控信息比较敏感，是系统运行的内部情况，如果你需要做访问控制，可以配置allow和deny这两个参数\n        # deny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝。如果allow没有配置或者为空，则允许所有访问\n        # 配置的格式\n          # <IP>\n          # 或者<IP>/<SUB_NET_MASK_size>其中128.242.127.1/24\n          # 24表示，前面24位是子网掩码，比对的时候，前面24位相同就匹配,不支持IPV6。\n        allow:\n        deny:\n  boot:\n    admin:\n      client:\n        url: ${ERD_ADMIN_MONITOR}\n\n  cloud:\n    nacos:\n      metadata:\n        preserved.heart.beat.interval: 1000\n        preserved.heart.beat.timeout: 3000\n        preserved.ip.delete.timeout: 3000\n    sentinel:\n      transport:\n        # 配置Sentinel dashborad地址\n        dashboard: ${SENTINEL-DASHBOARD-HOST:martin-sentinel}:${SENTINEL-DASHBOARD-PORT:9604}\n        port: ${SENTINEL-PORT:8719}\n      # 取消Sentinel控制台懒加载\n      eager: true\n      # 添加Nacos数据源配置\n      datasource:\n        ds1-nacos:\n          nacos:\n            server-addr: ${spring.cloud.nacos.discovery.server-addr}\n            username: ${NACOS_USER}\n            password: ${NACOS_PASSWORD}\n            dataId: ${spring.application.name}-sentinel\n            groupId: DEFAULT_GROUP\n            data-type: json\n            rule-type: flow   \n\n\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \"*\"  \n  endpoint:\n    health:\n      show-details: ALWAYS\n\nfoot: foot\n\nauth-server: http://martin-cloud-gateway:9502/auth\n\n#本项目用一个资源配置，将来可为每个服务单独配置oauth信息\nsecurity:\n  oauth2:\n    client:\n      client-id: client2 # 授权服务器配置的client id\n      client-secret: 123456 # 授权服务器配置的client secret\n      scope: all\n      #access-token-uri: ${auth-server}/oauth/token # 获取access token接口\n      #user-authorization-uri: ${auth-server}/oauth/authorize #  获取Authorization Code接口\n    resource:\n      token-info-uri: ${auth-server}/oauth/check_token # 验证token的接口\n#      user-info-uri: ${auth-server}/user # 一个可以获取认证授权的自定义接口，可以在授权服务器，也可以在其他服务器上\n#      prefer-token-info: true # 如果同时配置了token-info-uri 和 user-info-uri，这个现象设置使用哪个取验证授权\n\n\nmybatis-plus:\n  # 如果是放在src/main/java目录下 classpath:/com/yourpackage/*/mapper/*Mapper.xml\n  # 如果是放在resource目录 classpath:/mapper/*Mapper.xml\n  mapper-locations: \n    - classpath:/mapper/**/*Mapper.xml\n    - classpath:/mapper/*Mapper.xml\n  #实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.java2e.martin.*.entity\n  global-config:\n    #主键类型  0:\"数据库ID自增\", 1:\"用户输入ID\",2:\"全局唯一ID (数字类型唯一ID)\", 3:\"全局唯一ID UUID\";\n    id-type: 3\n    #字段策略 0:\"忽略判断\",1:\"非 NULL 判断\"),2:\"非空判断\"\n    field-strategy: 2\n    #驼峰下划线转换\n    db-column-underline: true\n    #mp2.3+ 全局表前缀 mp_\n    #table-prefix: mp_\n    #刷新mapper 调试神器\n    is-refresh: true\n    #数据库大写下划线转换\n    #capital-mode: true\n    # Sequence序列接口实现类配置,oracle用\n    #key-generator: com.baomidou.mybatisplus.incrementer.OracleKeyGenerator\n    #逻辑删除配置（下面3个配置）\n    logic-delete-value: 1\n    logic-not-delete-value: 0\n    #sql-injector: com.baomidou.mybatisplus.mapper.LogicSqlInjector\n    #自定义填充策略接口实现\n    #meta-object-handler: com.baomidou.springboot.MyMetaObjectHandler\n  configuration:\n    #配置返回数据库(column下划线命名&&返回java实体是驼峰命名)，自动匹配无需as（没开启这个，SQL需要写as： select user_id as userId）\n    map-underscore-to-camel-case: true\n    cache-enabled: false\n    #配置JdbcTypeForNull, oracle数据库必须配置\n    jdbc-type-for-null: \'null\'\n    lazyLoadingEnabled: true #延时加载的开关\n    multipleResultSetsEnabled: true #开启的话，延时加载一个属性时会加载该对象全部属性，否则按需加载属性\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl #开启sql日志\n\n#swagger公共信息\nswagger:\n  host: localhost:9502\n  title: Amap Swagger API\n  description: Martin 聚合文档\n  version: 2.0\n  license: Powered By java2e\n  licenseUrl: http://java2e.com/\n  terms-of-service-url: http://java2e.com/\n  contact:\n    name: 狮少\n    email:  www.zerocode.net.cn@gmail.com\n    url: https://java2e.com/about.html\n  authorization:\n    name: Martin OAuth\n    auth-regex: ^.*$\n    authorization-scope-list:\n      - scope: server\n        description: server all\n    token-url-list:\n      - ${security.auth.server}/token\n\n\n\n', '49acb80e65e2af8a9bebab90b7896615', '2022-04-18 04:08:17', '2023-07-07 23:05:03', NULL, '172.18.0.1', '', '', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (205, 'martin-biz-auth-dev.yml', 'DEFAULT_GROUP', 'spring:\n  thymeleaf:\n    prefix: classpath:/views/\n    suffix: .html\n    cache: false\n\n  security:\n    oauth2:\n      client:\n        ignore-urls:\n          - /authentication/**\n          - /oauthLogin\n          - /oauthGrant\n          - /g\n          - /oauth/**\n          - /actuator/**\n          - /oauth2/**\n          - /exit\n\n\n        provider:\n          qq:\n            authorizationUri: https://graph.qq.com/oauth2.0/authorize\n            tokenUri: https://graph.qq.com/oauth2.0/token\n            userInfoUri: https://graph.qq.com/user/get_user_info\n            userNameAttribute: nickname\n          wechat:\n            authorizationUri: https://open.weixin.qq.com/connect/qrconnect?appid={clientId}&redirect_uri={redirectUri}&response_type=code&scope=snsapi_login\n            tokenUri:  https://api.weixin.qq.com/sns/oauth2/access_token?appid={clientId}&secret={clientSecret}&code={code}&grant_type=authorization_code\n            userInfoUri: https://api.weixin.qq.com/sns/userinfo?access_token={access_token}&openid={openid}&lang=zh_CN \n            userNameAttribute: nickname\n        registration:\n          github:\n            clientId: ${ERD_SOCIAL_GITHUB_CLIENT_ID}\n            clientSecret: ${ERD_SOCIAL_GITHUB_CLIENT_SECRET}\n            redirectUri: ${ERD_SOCIAL_GITHUB_REDIRECT_URI}\n          qq:\n            clientId: ${ERD_SOCIAL_QQ_CLIENT_ID}\n            clientSecret: ${ERD_SOCIAL_QQ_CLIENT_SECRET}\n            # 在本地测试时需要配置代理将自己在qq注册的redirectUri重定向为http://localhost/api/login/oauth2/code/qq\n            redirectUri: ${ERD_SOCIAL_QQ_REDIRECT_URI}\n            authorizationGrantType: authorization_code\n            # 会根据当前的认证方式传递不同的参数\n            clientAuthenticationMethod: post\n          wechat:\n            clientId: ${ERD_SOCIAL_WECHAT_CLIENT_ID}\n            clientSecret: ${ERD_SOCIAL_WECHAT_CLIENT_SECRET}\n            # 在本地测试时需要配置代理将自己在qq注册的redirectUri重定向为http://localhost/api/login/oauth2/code/qq\n            redirectUri: ${ERD_SOCIAL_WECHAT_REDIRECT_URI}\n            #redirectUri: http://wexinlogin.gz2vip.91tunnel.com/index.html\n            authorizationGrantType: authorization_code\n            # 会根据当前的认证方式传递不同的参数\n            clientAuthenticationMethod: post\nmartin:\n  resource-server:\n    enabled: false\n  social:\n    enabled: true\n  socketio:\n    enabled: false\n', '9cc0d94ac9a66cbd3c440f8dab23fa81', '2022-04-18 04:08:17', '2023-07-09 02:39:33', NULL, '172.18.0.1', '', '', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (206, 'martin-biz-resource-dev.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      client-id: client2 # 授权服务器配置的client id\r\n      client-secret: 123456 # 授权服务器配置的client secret\r\n      scope: select\r\n      ignore-urls:\r\n        - /test\r\n        - /actuator/**\r\n      #access-token-uri: ${auth-server}/oauth/token # 获取access token接口\r\n      #user-authorization-uri: ${auth-server}/oauth/authorize #  获取Authorization Code接口\r\n    resource:\r\n      token-info-uri: ${auth-server}/oauth/check_token # 验证token的接口\r\n#      user-info-uri: ${auth-server}/user # 一个可以获取认证授权的自定义接口，可以在授权服务器，也可以在其他服务器上\r\n#      prefer-token-info: true # 如果同时配置了token-info-uri 和 user-info-uri，这个现象设置使用哪个取验证授权\r\n', '01a2f8e2736bf09d5eb420b12a20f4e5', '2022-04-18 04:08:17', '2022-04-18 04:46:05', NULL, '172.18.0.1', '', '', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (207, 'martin-biz-sso-dev.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      client-id: client3\r\n      client-secret: 123456\r\n      scope: sso\r\n      ignore-urls:\r\n        - /client/test\r\n        - /actuator/**\r\n      access-token-uri: ${auth-server}/oauth/token\r\n      user-authorization-uri: ${auth-server}/oauth/authorize\r\n    resource:\r\n      token-info-uri: ${auth-server}/oauth/check_token\r\n', 'fda9e8240ce33c6fd03040e35062746c', '2022-04-18 04:08:17', '2022-04-18 04:46:05', NULL, '172.18.0.1', '', '', NULL, NULL, NULL, 'null', NULL);
INSERT INTO `config_info` VALUES (208, 'martin-biz-swagger-dev.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      client-id: client3\r\n      client-secret: 123456\r\n      scope: swagger\r\n      ignore-urls:\r\n        - /actuator/**', 'ff6687cf299058979ccc5eb55005b5d4', '2022-04-18 04:08:17', '2022-04-18 04:46:05', NULL, '172.18.0.1', '', '', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (209, 'martin-biz-system-dev.yml', 'DEFAULT_GROUP', 'security:\n  oauth2:\n    client:\n      ignore-urls:\n        - /client/test\n        - /user/loadUserByUsername/*\n        - /log/add\n        - /user/loadDynamicSecurity\n        - /error\n        - /user/test1\n        - /menu/getCurrentUserMenusByRoles\n        - /user/currentUser\n        - /user/getUserByWechatOpenId\n        - /user/social/register\n        - /role/register\n        - /role/users\n        - /users\n        - /role/users/save\n        - /user/register\n        - /role/permission\n        - /saveCheckedOperations\n        - /role/roleCheckedPermission\n        - /log\n        - /approval/users\n        - /user/settings/basic\n        - /user/settings/update\n        - /totalUser\n        - /sysAnnouncement\n        \n\n \n        \n\n\nmartin:\n  feign:\n    enabled: true\n    secret: 12345678', 'c9734fa920dad87a18cb48f8426b8e6e', '2022-04-18 04:08:17', '2023-10-03 22:25:11', NULL, '172.18.0.1', '', '', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (210, 'martin-cloud-gateway-dev.yml', 'DEFAULT_GROUP', 'spring:\n  cloud:\n    gateway:\n      discovery:\n        locator:\n          enabled: true\n          lowerCaseServiceId: true\n      routes:\n        - id: martin-biz-auth\n          uri: lb://martin-biz-auth\n          predicates:\n            - Path=/auth/**\n          filters:\n            - StripPrefix=1\n        - id: martin-biz-resource\n          uri: lb://martin-biz-resource\n          predicates:\n            - Path=/reso/**\n          filters:\n            - StripPrefix=1\n        - id: martin-biz-sso\n          uri: lb://martin-biz-sso\n          predicates:\n            - Path=/sso/**\n          filters:\n            - StripPrefix=1\n        - id: martin-biz-swagger\n          uri: lb://martin-biz-swagger\n          predicates:\n            - Path=/swag/**\n          filters:\n            - StripPrefix=1\n        - id: martin-biz-system\n          uri: lb://martin-biz-system\n          predicates:\n            - Path=/syst/**\n          filters:\n            - StripPrefix=1\n        - id: martin-extension-generator\n          uri: lb://martin-extension-generator\n          predicates:\n            - Path=/gene/**\n          filters:\n            - StripPrefix=1       \n        - id: martin-extension-quartz\n          uri: lb://martin-extension-quartz\n          predicates:\n            - Path=/quar/**\n          filters:\n            - StripPrefix=1  \n        - id: martin-extension-ncnb\n          uri: lb://martin-extension-ncnb\n          predicates:\n            - Path=/ncnb/**\n          filters:\n            - StripPrefix=1  \n        - id: martin-extension-loco\n          uri: lb://martin-extension-loco\n          predicates:\n            - Path=/loco/**\n          filters:\n            - StripPrefix=1\n        \n management:\n  endpoints:\n    enabled-by-default: false', '77b7710a35bd93e3870b4316d45a921b', '2022-04-18 04:08:17', '2023-07-08 07:56:12', NULL, '172.18.0.1', '', '', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (211, 'martin-extension-generator-dev.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      ignore-urls:\r\n        - /actuator/**', 'f79b70a53d86ad29cccbfc80fba33bf8', '2022-04-18 04:08:17', '2022-04-18 04:46:05', NULL, '172.18.0.1', '', '', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (212, 'martin-extension-skywalking-dev.yml', 'DEFAULT_GROUP', 'security:\n  oauth2:\n    client:\n      ignore-urls:\n        - /alarm/mail\n        - /actuator/**\n\n\n', '57337040640aaed21a9643c98b8e2fa8', '2022-04-18 04:08:17', '2022-04-18 04:46:05', NULL, '172.18.0.1', '', '', NULL, NULL, NULL, 'text', NULL);
INSERT INTO `config_info` VALUES (213, 'martin-biz-system-sentinel', 'DEFAULT_GROUP', '[\r\n    {\r\n        \"resource\": \"/user/page\",\r\n        \"limitApp\": \"default\",\r\n        \"grade\": 1,\r\n        \"count\": 1,\r\n        \"strategy\": 0,\r\n        \"controlBehavior\": 0,\r\n        \"clusterMode\": false\r\n    },\r\n        {\r\n        \"resource\": \"/element/page\",\r\n        \"limitApp\": \"default\",\r\n        \"grade\": 1,\r\n        \"count\": 3,\r\n        \"strategy\": 0,\r\n        \"controlBehavior\": 0,\r\n        \"clusterMode\": false\r\n    }\r\n]\r\n', 'd211238460434e18222863e5277ca8ee', '2022-04-18 04:08:17', '2022-04-18 04:08:17', NULL, '172.18.0.1', '', '', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (214, 'martin-extension-quartz-dev.yml', 'DEFAULT_GROUP', 'security:\n  oauth2:\n    client:\n      ignore-urls:\n        - /actuator/**\n        - /quartz/**\n\nspring:\n  quartz:\n    auto-startup: true\n    properties:\n      org:\n        quartz:\n          scheduler:\n            instanceName: MartinScheduler\n            instanceId: AUTO\n          jobStore:\n            class: org.quartz.impl.jdbcjobstore.JobStoreTX\n            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n            tablePrefix: QRTZ_\n            isClustered: false #是否使用集群\n            clusterCheckinInterval: 10000\n            useProperties: false\n          threadPool:\n            class: org.quartz.simpl.SimpleThreadPool\n            threadCount: 10\n            threadPriority: 5\n            threadsInheritContextClassLoaderOfInitializingThread: true\n    #数据库方式\n    job-store-type: jdbc\n    #初始化表结构\n    jdbc:\n      initialize-schema: never\n', 'd701ab28b38ff462c000e688496feb5c', '2022-04-18 04:08:17', '2022-04-18 04:46:05', NULL, '172.18.0.1', '', '', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (215, 'martin-extension-ncnb-dev.yml', 'DEFAULT_GROUP', 'security:\n  oauth2:\n    client:\n      ignore-urls:\n        - /endpoint/**\n        - /**\n        - /project/roles\n\nspring:\n  # 数据源\n  datasource:\n    url: jdbc:mysql://${ERD_MYSQL}:${ERD_MYSQL_PORT}/${ERD_MYSQL_ERD_DB}?useUnicode=true&useSSL=false&characterEncoding=utf8&serverTimezone=GMT%2B8&allowPublicKeyRetrieval=true&stringtype=unspecified\n    username: ${ERD_MYSQL_ERD_USER}\n    password: ${ERD_MYSQL_ERD_PASSWORD}\n\n\nmartin:\n  websocket:\n    enabled: false\n    enableSimpleBroker: /topic,/queue\n    applicationDestinationPrefixes: /app\n    endpoint: /endpoint\n    allowedOrigins: http://localhost:8000,http://localhost:9502,http://localhost:3000,http://erd-online:3000\n  socketio:\n    enabled: true\n    hostname: localhost\n    port: 9092\n    bossThreads: 0\n    workerThreads: 0\n    allowCustomRequests: false\n    upgradeTimeout: 10000\n    pingTimeout: 60000\n    pingInterval: 25000\n    firstDataTimeout: 5000\n    maxHttpContentLength: 65536\n    maxFramePayloadLength: 65536\n    sslProtocol: \"TLSv1\"\n    keyStoreFormat: \"JKS\"\n    trustStoreFormat: \"JKS\"\n    preferDirectBuffer: true\n    addVersionHeader: true\n    httpCompression: true\n    websocketCompression: true\n    randomSession: false\n    retryCount: 3\n\nopenai:\n  token: ${OPENAI_TOKEN}\n  proxy: \n    host: ${OPENAI_PROXY_HOST}\n    port: ${OPENAI_PROXY_PORT}\n    timeout: ${OPENAI_PROXY_TIMEOUT}\n  secret: ${OPENAI_SECRET}\n  apiHost: ${OPENAI_API_HOST}', '895554a114faea25bcb10bcce3e99123', '2022-04-18 04:08:17', '2023-04-16 05:39:46', NULL, '172.18.0.1', '', '', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (216, 'application.yml', 'DEFAULT_GROUP', 'martin:\n  resource-server:\n    enabled: true\n  feign:\n    enabled: true\n    secret: 12345678\n  data:\n    enabled: true\n  message:\n    enabled: true\n  social:\n    enabled: false\n  oss:\n    enabled: true\n    type: 0\n    endpoint: http://localhost:9000/\n    accessKey: minio\n    secretKey: minio123\n  ui:\n    url: http://localhost:8000\n    #url: https://www.zerocode.net.cn\n\n\nribbon:\n  ReadTimeout: 10000\n  ConnectTimeout: 10000\n  ServerListRefreshInterval: 3000\n\n\n \n\n\nspring:\n  profiles:\n    active: dev\n  redis:\n    host: martin-redis\n    port: 6379\n    inetutils:\n      ignored-interfaces:\n        - docker0\n        - veth.*\n        - VM.*\n  servlet:\n    multipart:\n      # 根据实际需求作调整\n      # 默认最大上传文件大小为1M，单个文件大小\n      max-file-size: 10MB\n      # 默认最大请求大小为10M，总上传的数据大小\n      max-request-size: 15MB\n  # 数据源\n  datasource:\n    url: jdbc:mysql://martin-mysql:3306/martin?useUnicode=true&useSSL=false&characterEncoding=utf8&serverTimezone=GMT%2B8&allowPublicKeyRetrieval=true&stringtype=unspecified\n    type: com.zaxxer.hikari.HikariDataSource\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: martin\n    password: ~!LCmartin\n    #验证连接的有效性\n    test-while-idle: true\n    #空闲连接回收的时间间隔，与test-while-idle一起使用，设置5分钟\n    time-between-eviction-runs-millis: 300000\n    #连接池空闲连接的有效时间 ，设置30分钟\n    min-evictable-idle-time-millis: 1800000\n    #获取连接时候验证\n    test-on-borrow: true\n    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，\'wall\'用于防火墙\n    filters: stat,wall,slf4j\n    hikari:\n      ## 最小空闲连接数量\n      minimum-idle: 5\n      ## 空闲连接存活最大时间，默认600000（10分钟）\n      idle-timeout: 180000\n      ## 连接池最大连接数，默认是10\n      maximum-pool-size: 20\n      ## 此属性控制从池返回的连接的默认自动提交行为,默认值：true\n      auto-commit: true\n      ## 连接池母子\n      pool-name: MyHikariCP\n      ## 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认1800000即30分钟\n      max-lifetime: 1800000\n      ## 数据库连接超时时间,默认30秒，即30000\n      connection-timeout: 60000\n      connection-test-query: SELECT 1\n      #connection-test-query: select 1 from dual\n  boot:\n    admin:\n      client:\n        url: http://martin-extension-monitor:9601\n\n  cloud:\n    nacos:\n      metadata:\n        preserved.heart.beat.interval: 1000\n        preserved.heart.beat.timeout: 3000\n        preserved.ip.delete.timeout: 3000\n    sentinel:\n      transport:\n        # 配置Sentinel dashborad地址\n        dashboard: ${SENTINEL-DASHBOARD-HOST:martin-sentinel}:${SENTINEL-DASHBOARD-PORT:9604}\n        port: ${SENTINEL-PORT:8719}\n      # 取消Sentinel控制台懒加载\n      eager: true\n      # 添加Nacos数据源配置\n      datasource:\n        ds1-nacos:\n          nacos:\n            server-addr: ${spring.cloud.nacos.discovery.server-addr}\n            username: nacos\n            password: nacos\n            dataId: ${spring.application.name}-sentinel\n            groupId: DEFAULT_GROUP\n            data-type: json\n            rule-type: flow   \n  mail:\n    host: ${MAIL_HOST} #发送邮件的服务器\n    port: ${MAIL_PORT}\n    username: ${MAIL_USERNAME}\n    password: ${MAIL_PASSWORD}\n    properties.mail.smtp.auth: true\n    properties.mail.smtp.starttls.enable: true\n    default-encoding: utf-8\n\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \"*\"\n  endpoint:\n    health:\n      show-details: ALWAYS\n  health:\n    mail:\n      enabled: false\n\n\nfoot: foot\n\nauth-server: http://martin-cloud-gateway:9502/auth\n\n#本项目用一个资源配置，将来可为每个服务单独配置oauth信息\nsecurity:\n  oauth2:\n    client:\n      client-id: client2 # 授权服务器配置的client id\n      client-secret: 123456 # 授权服务器配置的client secret\n      scope: all\n      #access-token-uri: ${auth-server}/oauth/token # 获取access token接口\n      #user-authorization-uri: ${auth-server}/oauth/authorize #  获取Authorization Code接口\n    resource:\n      token-info-uri: ${auth-server}/oauth/check_token # 验证token的接口\n#      user-info-uri: ${auth-server}/user # 一个可以获取认证授权的自定义接口，可以在授权服务器，也可以在其他服务器上\n#      prefer-token-info: true # 如果同时配置了token-info-uri 和 user-info-uri，这个现象设置使用哪个取验证授权\n\n\nmybatis-plus:\n  # 如果是放在src/main/java目录下 classpath:/com/yourpackage/*/mapper/*Mapper.xml\n  # 如果是放在resource目录 classpath:/mapper/*Mapper.xml\n  mapper-locations: \n    - classpath:/mapper/**/*Mapper.xml\n    - classpath:/mapper/*Mapper.xml\n  #实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.java2e.martin.*.entity\n  global-config:\n    #主键类型  0:\"数据库ID自增\", 1:\"用户输入ID\",2:\"全局唯一ID (数字类型唯一ID)\", 3:\"全局唯一ID UUID\";\n    id-type: 3\n    #字段策略 0:\"忽略判断\",1:\"非 NULL 判断\"),2:\"非空判断\"\n    field-strategy: 2\n    #驼峰下划线转换\n    db-column-underline: true\n    #mp2.3+ 全局表前缀 mp_\n    #table-prefix: mp_\n    #刷新mapper 调试神器\n    is-refresh: true\n    #数据库大写下划线转换\n    #capital-mode: true\n    # Sequence序列接口实现类配置,oracle用\n    #key-generator: com.baomidou.mybatisplus.incrementer.OracleKeyGenerator\n    #逻辑删除配置（下面3个配置）\n    logic-delete-field: del_flag\n    logic-delete-value: 1\n    logic-not-delete-value: 0\n    #sql-injector: com.baomidou.mybatisplus.mapper.LogicSqlInjector\n    #自定义填充策略接口实现\n    #meta-object-handler: com.baomidou.springboot.MyMetaObjectHandler\n  configuration:\n    #配置返回数据库(column下划线命名&&返回java实体是驼峰命名)，自动匹配无需as（没开启这个，SQL需要写as： select user_id as userId）\n    map-underscore-to-camel-case: true\n    cache-enabled: false\n    #配置JdbcTypeForNull, oracle数据库必须配置\n    jdbc-type-for-null: \'null\'\n    lazyLoadingEnabled: true #延时加载的开关\n    multipleResultSetsEnabled: true #开启的话，延时加载一个属性时会加载该对象全部属性，否则按需加载属性\n\n#swagger公共信息\nswagger:\n  host: localhost:9502\n  title: Amap Swagger API\n  description: Martin 聚合文档\n  version: 2.0\n  license: Powered By java2e\n  licenseUrl: http://java2e.com/\n  terms-of-service-url: http://java2e.com/\n  contact:\n    name: 狮少\n    email: liangcan.jxjy.edu@gmail.com\n    url: https://java2e.com/about.html\n  authorization:\n    name: Martin OAuth\n    auth-regex: ^.*$\n    authorization-scope-list:\n      - scope: server\n        description: server all\n    token-url-list:\n      - ${security.auth.server}/token\n\n\n\n', '5d75dff65b73366273a463ba892cb70f', '2022-04-18 04:08:17', '2023-05-23 09:28:37', NULL, '172.18.0.1', '', '', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (220, 'application-release.yml', 'DEFAULT_GROUP', 'martin:\n  resource-server:\n    enabled: true\n  feign:\n    enabled: true\n    secret: 12345678\n  data:\n    enabled: true\n  message:\n    enabled: true\n  social:\n    enabled: false\n  websocket:\n    enabled: false\n  oss:\n    enabled: true\n    type: 0\n    endpoint: ${ERD_OSS_ENDPOINT}\n    accessKey: minio\n    secretKey: minio123\n  ui:\n    url: ${ERD_UI_URL}\n\n\nribbon:\n  ReadTimeout: 10000\n  ConnectTimeout: 10000\n  ServerListRefreshInterval: 3000\n\n\n \n\n\nspring:\n  profiles:\n    active: dev\n  redis:\n    host: erd-redis\n    port: 6379\n    inetutils:\n      ignored-interfaces:\n        - docker0\n        - veth.*\n        - VM.*\n  servlet:\n    multipart:\n      # 根据实际需求作调整\n      # 默认最大上传文件大小为1M，单个文件大小\n      max-file-size: 10MB\n      # 默认最大请求大小为10M，总上传的数据大小\n      max-request-size: 15MB\n  # 数据源\n  datasource:\n    url: jdbc:mysql://${ERD_MYSQL}:${ERD_MYSQL_PORT}/${ERD_MYSQL_MARTIN_DB}?useUnicode=true&useSSL=false&characterEncoding=utf8&serverTimezone=GMT%2B8&allowPublicKeyRetrieval=true\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: ${ERD_MYSQL_MARTIN_USER}\n    password: ${ERD_MYSQL_MARTIN_PASSWORD}\n    type: com.alibaba.druid.pool.DruidDataSource\n    # druid相关配置\n    druid:\n      # 初始化 最小 最大\n      initial-size: 5\n      min-idle: 5\n      max-active: 20\n      # 配置获取连接等待超时的时间\n      max-wait: 60000\n      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\n      time-between-eviction-runs-millis: 60000\n      # 配置一个连接在池中最小生存的时间，单位是毫秒\n      min-evictable-idle-time-millis: 300000\n      validation-query: SELECT \'x\'\n      test-while-idle: true\n      test-on-borrow: false\n      test-on-return: false\n      # 打开PSCache，并且指定每个连接上PSCache的大小\n      poolPreparedStatements: true\n      maxPoolPreparedStatementPerConnectionSize: 20\n      # 配置多个英文逗号分隔\n      filters: stat,wall\n      # WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter\n      # 是否启用StatFilter默认值true\n      web-stat-filter:\n        enabled: true\n        url-pattern: /*\n        exclusions: \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\"\n        session-stat-enable: false\n        session-stat-max-count: 1000\n        principal-cookie-name: admin\n        principal-session-name: admin\n        profile-enable: true\n      # 根据配置中的url-pattern来访问内置监控页面，如果是上面的配置，内置监控页面的首页是/druid/index.html\n      # http://loacalhsot:8081/druid\n      stat-view-servlet:\n        enabled: true\n        url-pattern: /druid/*  # 监控页面访问路径\n        # 允许清空统计数据\n        reset-enable: true\n        login-username: erd\n        login-password: ~!LCDruid\n        # StatViewSerlvet展示出来的监控信息比较敏感，是系统运行的内部情况，如果你需要做访问控制，可以配置allow和deny这两个参数\n        # deny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝。如果allow没有配置或者为空，则允许所有访问\n        # 配置的格式\n          # <IP>\n          # 或者<IP>/<SUB_NET_MASK_size>其中128.242.127.1/24\n          # 24表示，前面24位是子网掩码，比对的时候，前面24位相同就匹配,不支持IPV6。\n        allow:\n        deny:\n  boot:\n    admin:\n      client:\n        url: ${ERD_ADMIN_MONITOR}\n\n  cloud:\n    nacos:\n      metadata:\n        preserved.heart.beat.interval: 1000\n        preserved.heart.beat.timeout: 3000\n        preserved.ip.delete.timeout: 3000\n    sentinel:\n      transport:\n        # 配置Sentinel dashborad地址\n        dashboard: ${SENTINEL-DASHBOARD-HOST:martin-sentinel}:${SENTINEL-DASHBOARD-PORT:9604}\n        port: ${SENTINEL-PORT:8719}\n      # 取消Sentinel控制台懒加载\n      eager: true\n      # 添加Nacos数据源配置\n      datasource:\n        ds1-nacos:\n          nacos:\n            server-addr: ${spring.cloud.nacos.discovery.server-addr}\n            username: ${NACOS_USER}\n            password: ${NACOS_PASSWORD}\n            dataId: ${spring.application.name}-sentinel\n            groupId: DEFAULT_GROUP\n            data-type: json\n            rule-type: flow   \n\n\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \"health\"  \n  endpoint:\n    health:\n      show-details: ALWAYS\n\nfoot: foot\n\nauth-server: http://martin-cloud-gateway:9502/auth\n\n#本项目用一个资源配置，将来可为每个服务单独配置oauth信息\nsecurity:\n  oauth2:\n    client:\n      client-id: client2 # 授权服务器配置的client id\n      client-secret: 123456 # 授权服务器配置的client secret\n      scope: all\n      #access-token-uri: ${auth-server}/oauth/token # 获取access token接口\n      #user-authorization-uri: ${auth-server}/oauth/authorize #  获取Authorization Code接口\n    resource:\n      token-info-uri: ${auth-server}/oauth/check_token # 验证token的接口\n#      user-info-uri: ${auth-server}/user # 一个可以获取认证授权的自定义接口，可以在授权服务器，也可以在其他服务器上\n#      prefer-token-info: true # 如果同时配置了token-info-uri 和 user-info-uri，这个现象设置使用哪个取验证授权\n\n\nmybatis-plus:\n  # 如果是放在src/main/java目录下 classpath:/com/yourpackage/*/mapper/*Mapper.xml\n  # 如果是放在resource目录 classpath:/mapper/*Mapper.xml\n  mapper-locations: \n    - classpath:/mapper/**/*Mapper.xml\n    - classpath:/mapper/*Mapper.xml\n  #实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.java2e.martin.*.entity\n  global-config:\n    #主键类型  0:\"数据库ID自增\", 1:\"用户输入ID\",2:\"全局唯一ID (数字类型唯一ID)\", 3:\"全局唯一ID UUID\";\n    id-type: 3\n    #字段策略 0:\"忽略判断\",1:\"非 NULL 判断\"),2:\"非空判断\"\n    field-strategy: 2\n    #驼峰下划线转换\n    db-column-underline: true\n    #mp2.3+ 全局表前缀 mp_\n    #table-prefix: mp_\n    #刷新mapper 调试神器\n    is-refresh: true\n    #数据库大写下划线转换\n    #capital-mode: true\n    # Sequence序列接口实现类配置,oracle用\n    #key-generator: com.baomidou.mybatisplus.incrementer.OracleKeyGenerator\n    #逻辑删除配置（下面3个配置）\n    logic-delete-value: 1\n    logic-not-delete-value: 0\n    #sql-injector: com.baomidou.mybatisplus.mapper.LogicSqlInjector\n    #自定义填充策略接口实现\n    #meta-object-handler: com.baomidou.springboot.MyMetaObjectHandler\n  configuration:\n    call-setters-on-nulls: true\n    #配置返回数据库(column下划线命名&&返回java实体是驼峰命名)，自动匹配无需as（没开启这个，SQL需要写as： select user_id as userId）\n    map-underscore-to-camel-case: true\n    cache-enabled: false\n    #配置JdbcTypeForNull, oracle数据库必须配置\n    jdbc-type-for-null: \'null\'\n    lazyLoadingEnabled: true #延时加载的开关\n    multipleResultSetsEnabled: true #开启的话，延时加载一个属性时会加载该对象全部属性，否则按需加载属性\n\n#swagger公共信息\nswagger:\n  host: localhost:9502\n  title: Amap Swagger API\n  description: Martin 聚合文档\n  version: 2.0\n  license: Powered By java2e\n  licenseUrl: http://java2e.com/\n  terms-of-service-url: http://java2e.com/\n  contact:\n    name: 狮少\n    email:  www.zerocode.net.cn@gmail.com\n    url: https://java2e.com/about.html\n  authorization:\n    name: Martin OAuth\n    auth-regex: ^.*$\n    authorization-scope-list:\n      - scope: server\n        description: server all\n    token-url-list:\n      - ${security.auth.server}/token\n\n\n\n', '80ddbddb3125a4d372cc2561fd6818f0', '2022-04-18 04:39:51', '2023-05-23 09:28:27', NULL, '172.18.0.1', '', '', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (221, 'martin-biz-auth-release.yml', 'DEFAULT_GROUP', 'spring:\n  thymeleaf:\n    prefix: classpath:/views/\n    suffix: .html\n    cache: false\n\n  security:\n    oauth2:\n      client:\n        ignore-urls:\n          - /authentication/**\n          - /oauthLogin\n          - /oauthGrant\n          - /g\n          - /oauth/**\n          - /actuator/**\n          - /oauth2/**\n          - /logout\n\n\n        provider:\n          qq:\n            authorizationUri: https://graph.qq.com/oauth2.0/authorize\n            tokenUri: https://graph.qq.com/oauth2.0/token\n            userInfoUri: https://graph.qq.com/user/get_user_info\n            userNameAttribute: nickname\n          wechat:\n            authorizationUri: https://open.weixin.qq.com/connect/qrconnect?appid={clientId}&redirect_uri={redirectUri}&response_type=code&scope=snsapi_login\n            tokenUri:  https://api.weixin.qq.com/sns/oauth2/access_token?appid={clientId}&secret={clientSecret}&code={code}&grant_type=authorization_code\n            userInfoUri: https://api.weixin.qq.com/sns/userinfo?access_token={access_token}&openid={openid}&lang=zh_CN \n            userNameAttribute: nickname\n        registration:\n          github:\n            clientId: ${ERD_SOCIAL_GITHUB_CLIENT_ID}\n            clientSecret: ${ERD_SOCIAL_GITHUB_CLIENT_SECRET}\n            redirectUri: ${ERD_SOCIAL_GITHUB_REDIRECT_URI}\n          qq:\n            clientId: ${ERD_SOCIAL_QQ_CLIENT_ID}\n            clientSecret: ${ERD_SOCIAL_QQ_CLIENT_SECRET}\n            # 在本地测试时需要配置代理将自己在qq注册的redirectUri重定向为http://localhost/api/login/oauth2/code/qq\n            redirectUri: ${ERD_SOCIAL_QQ_REDIRECT_URI}\n            authorizationGrantType: authorization_code\n            # 会根据当前的认证方式传递不同的参数\n            clientAuthenticationMethod: post\n          wechat:\n            clientId: ${ERD_SOCIAL_WECHAT_CLIENT_ID}\n            clientSecret: ${ERD_SOCIAL_WECHAT_CLIENT_SECRET}\n            # 在本地测试时需要配置代理将自己在qq注册的redirectUri重定向为http://localhost/api/login/oauth2/code/qq\n            redirectUri: ${ERD_SOCIAL_WECHAT_REDIRECT_URI}\n            #redirectUri: http://wexinlogin.gz2vip.91tunnel.com/index.html\n            authorizationGrantType: authorization_code\n            # 会根据当前的认证方式传递不同的参数\n            clientAuthenticationMethod: post\nmartin:\n  resource-server:\n    enabled: false\n  social:\n    enabled: true\n  socketio:\n    enabled: false\n', '6c3a3e1f58f364669647e8d273dd0e6f', '2022-04-18 04:39:51', '2023-07-08 10:52:43', NULL, '172.18.0.1', '', '', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (222, 'martin-biz-resource-release.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      client-id: client2 # 授权服务器配置的client id\r\n      client-secret: 123456 # 授权服务器配置的client secret\r\n      scope: select\r\n      ignore-urls:\r\n        - /test\r\n        - /actuator/**\r\n      #access-token-uri: ${auth-server}/oauth/token # 获取access token接口\r\n      #user-authorization-uri: ${auth-server}/oauth/authorize #  获取Authorization Code接口\r\n    resource:\r\n      token-info-uri: ${auth-server}/oauth/check_token # 验证token的接口\r\n#      user-info-uri: ${auth-server}/user # 一个可以获取认证授权的自定义接口，可以在授权服务器，也可以在其他服务器上\r\n#      prefer-token-info: true # 如果同时配置了token-info-uri 和 user-info-uri，这个现象设置使用哪个取验证授权\r\n', '01a2f8e2736bf09d5eb420b12a20f4e5', '2022-04-18 04:39:51', '2022-04-18 04:39:51', NULL, '172.18.0.1', '', '', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (223, 'martin-biz-sso-release.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      client-id: client3\r\n      client-secret: 123456\r\n      scope: sso\r\n      ignore-urls:\r\n        - /client/test\r\n        - /actuator/**\r\n      access-token-uri: ${auth-server}/oauth/token\r\n      user-authorization-uri: ${auth-server}/oauth/authorize\r\n    resource:\r\n      token-info-uri: ${auth-server}/oauth/check_token\r\n', 'fda9e8240ce33c6fd03040e35062746c', '2022-04-18 04:39:51', '2022-04-18 04:39:51', NULL, '172.18.0.1', '', '', NULL, NULL, NULL, 'null', NULL);
INSERT INTO `config_info` VALUES (224, 'martin-biz-swagger-release.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      client-id: client3\r\n      client-secret: 123456\r\n      scope: swagger\r\n      ignore-urls:\r\n        - /actuator/**', 'ff6687cf299058979ccc5eb55005b5d4', '2022-04-18 04:39:51', '2022-04-18 04:39:51', NULL, '172.18.0.1', '', '', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (225, 'martin-biz-system-release.yml', 'DEFAULT_GROUP', 'security:\n  oauth2:\n    client:\n      ignore-urls:\n        - /client/test\n        - /user/loadUserByUsername/*\n        - /log/add\n        - /user/loadDynamicSecurity\n        - /error\n        - /user/test1\n        - /menu/getCurrentUserMenusByRoles\n        - /user/currentUser\n        - /user/getUserByWechatOpenId\n        - /user/social/register\n        - /role/register\n        - /role/users\n        - /users\n        - /role/users/save\n        - /user/register\n        - /role/permission\n        - /saveCheckedOperations\n        - /role/roleCheckedPermission\n        - /log\n        - /approval/users\n        - /user/settings/basic\n        - /user/settings/update\n        - /totalUser\n        - /sysAnnouncement\n        \n \n        \n\n\nmartin:\n  feign:\n    secret: 123456789', '614ddcfde66cd5dc477fc995599e8e5d', '2022-04-18 04:39:51', '2023-10-03 22:22:17', NULL, '172.18.0.1', '', '', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (226, 'martin-cloud-gateway-release.yml', 'DEFAULT_GROUP', 'spring:\n  cloud:\n    gateway:\n      discovery:\n        locator:\n          enabled: true\n          lowerCaseServiceId: true\n      routes:\n        - id: martin-biz-auth\n          uri: lb://martin-biz-auth\n          predicates:\n            - Path=/auth/**\n          filters:\n            - StripPrefix=1\n        - id: martin-biz-resource\n          uri: lb://martin-biz-resource\n          predicates:\n            - Path=/reso/**\n          filters:\n            - StripPrefix=1\n        - id: martin-biz-sso\n          uri: lb://martin-biz-sso\n          predicates:\n            - Path=/sso/**\n          filters:\n            - StripPrefix=1\n        - id: martin-biz-swagger\n          uri: lb://martin-biz-swagger\n          predicates:\n            - Path=/swag/**\n          filters:\n            - StripPrefix=1\n        - id: martin-biz-system\n          uri: lb://martin-biz-system\n          predicates:\n            - Path=/syst/**\n          filters:\n            - StripPrefix=1\n        - id: martin-extension-generator\n          uri: lb://martin-extension-generator\n          predicates:\n            - Path=/gene/**\n          filters:\n            - StripPrefix=1       \n        - id: martin-extension-quartz\n          uri: lb://martin-extension-quartz\n          predicates:\n            - Path=/quar/**\n          filters:\n            - StripPrefix=1  \n        - id: martin-extension-ncnb\n          uri: lb://martin-extension-ncnb\n          predicates:\n            - Path=/ncnb/**\n          filters:\n            - StripPrefix=1  \n       \n \nmanagement:\n  endpoints:\n    enabled-by-default: false', 'f488fc9637cd315b67958f4bcffbdf3d', '2022-04-18 04:39:51', '2023-07-08 07:55:52', NULL, '172.18.0.1', '', '', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (227, 'martin-extension-generator-release.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      ignore-urls:\r\n        - /actuator/**', 'f79b70a53d86ad29cccbfc80fba33bf8', '2022-04-18 04:39:51', '2022-04-18 04:39:51', NULL, '172.18.0.1', '', '', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (228, 'martin-extension-skywalking-release.yml', 'DEFAULT_GROUP', 'security:\n  oauth2:\n    client:\n      ignore-urls:\n        - /alarm/mail\n        - /actuator/**\n\n\n', '57337040640aaed21a9643c98b8e2fa8', '2022-04-18 04:39:51', '2022-04-18 04:39:51', NULL, '172.18.0.1', '', '', NULL, NULL, NULL, 'text', NULL);
INSERT INTO `config_info` VALUES (240, 'martin-extension-quartz-release.yml', 'DEFAULT_GROUP', 'security:\n  oauth2:\n    client:\n      ignore-urls:\n        - /actuator/**\n        - /quartz/**\n\nspring:\n  quartz:\n    auto-startup: true\n    properties:\n      org:\n        quartz:\n          scheduler:\n            instanceName: MartinScheduler\n            instanceId: AUTO\n          jobStore:\n            class: org.quartz.impl.jdbcjobstore.JobStoreTX\n            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n            tablePrefix: QRTZ_\n            isClustered: false #是否使用集群\n            clusterCheckinInterval: 10000\n            useProperties: false\n          threadPool:\n            class: org.quartz.simpl.SimpleThreadPool\n            threadCount: 10\n            threadPriority: 5\n            threadsInheritContextClassLoaderOfInitializingThread: true\n    #数据库方式\n    job-store-type: jdbc\n    #初始化表结构\n    jdbc:\n      initialize-schema: never\n', 'd701ab28b38ff462c000e688496feb5c', '2022-04-18 04:40:25', '2022-04-18 04:40:25', NULL, '172.18.0.1', '', '', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (241, 'martin-extension-ncnb-release.yml', 'DEFAULT_GROUP', 'security:\n  oauth2:\n    client:\n      ignore-urls:\n        - /endpoint/**\n        - /**\n        - /project/roles\n        - /totalUser\n\nspring:\n  # 数据源\n  datasource:\n    url: jdbc:mysql://${ERD_MYSQL}:${ERD_MYSQL_PORT}/${ERD_MYSQL_ERD_DB}?useUnicode=true&useSSL=false&characterEncoding=utf8&serverTimezone=GMT%2B8&allowPublicKeyRetrieval=true\n    username: ${ERD_MYSQL_ERD_USER}\n    password: ${ERD_MYSQL_ERD_PASSWORD}\n\nmartin:\n  websocket:\n    enabled: false\n    enableSimpleBroker: /topic,/queue\n    applicationDestinationPrefixes: /app\n    endpoint: /endpoint\n    allowedOrigins: http://localhost:8000,http://localhost:9502,http://localhost:3000,http://erd-online:3000\n  socketio:\n    enabled: true\n    hostname: localhost\n    port: 9092\n    bossThreads: 0\n    workerThreads: 0\n    allowCustomRequests: false\n    upgradeTimeout: 10000\n    pingTimeout: 60000\n    pingInterval: 25000\n    firstDataTimeout: 5000\n    maxHttpContentLength: 65536\n    maxFramePayloadLength: 65536\n    sslProtocol: \"TLSv1\"\n    keyStoreFormat: \"JKS\"\n    trustStoreFormat: \"JKS\"\n    preferDirectBuffer: true\n    addVersionHeader: true\n    httpCompression: true\n    websocketCompression: true\n    randomSession: false\n    retryCount: 3\n\nopenai:\n  token: ${OPENAI_TOKEN}\n  proxy: \n    host: ${OPENAI_PROXY_HOST}\n    port: ${OPENAI_PROXY_PORT}\n    timeout: ${OPENAI_PROXY_TIMEOUT}\n  secret: ${OPENAI_SECRET}\n  apiHost: ${OPENAI_API_HOST}\n  limit:\n    times: ${OPENAI_LIMIT_TIMES}\n    exclude: ${OPENAI_LIMIT_EXCLUDE}', '3d9ce2d99056c3dfbfbec040e4844f78', '2022-04-18 04:40:25', '2023-05-03 14:16:36', NULL, '172.18.0.1', '', '', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (251, 'martin-biz-system-sentinel-dev', 'DEFAULT_GROUP', '[\r\n    {\r\n        \"resource\": \"/user/page\",\r\n        \"limitApp\": \"default\",\r\n        \"grade\": 1,\r\n        \"count\": 1,\r\n        \"strategy\": 0,\r\n        \"controlBehavior\": 0,\r\n        \"clusterMode\": false\r\n    },\r\n        {\r\n        \"resource\": \"/element/page\",\r\n        \"limitApp\": \"default\",\r\n        \"grade\": 1,\r\n        \"count\": 3,\r\n        \"strategy\": 0,\r\n        \"controlBehavior\": 0,\r\n        \"clusterMode\": false\r\n    }\r\n]\r\n', 'd211238460434e18222863e5277ca8ee', '2022-04-18 04:46:05', '2022-04-18 04:46:05', NULL, '172.18.0.1', '', '', NULL, NULL, NULL, 'text', NULL);
INSERT INTO `config_info` VALUES (258, 'erd-message-dev.yml', 'DEFAULT_GROUP', 'security:\n  oauth2:\n    client:\n      ignore-urls:\n        - /test', '0a478f3a40254bbb1b8a2fc6171d0ae2', '2022-07-11 14:12:27', '2022-07-11 15:14:30', NULL, '172.18.0.1', '', '', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (276, 'martin-extension-loco-dev.yml', 'DEFAULT_GROUP', 'security:\n  oauth2:\n    client:\n      ignore-urls:\n        - /endpoint/**\n        - /**\n\n\nspring:\n  # 数据源\n  datasource:\n    url: jdbc:mysql://101.34.87.241:3306/loco?useUnicode=true&useSSL=false&characterEncoding=utf8&serverTimezone=GMT%2B8&allowPublicKeyRetrieval=true\n    type: com.zaxxer.hikari.HikariDataSource\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: loco\n    password: 1\n\nmartin:\n  websocket:\n    enabled: false\n    enableSimpleBroker: /topic,/queue\n    applicationDestinationPrefixes: /app\n    endpoint: /endpoint\n    allowedOrigins: http://localhost:8000,http://localhost:9502,http://localhost:3000,http://erd-online:3000\n  socketio:\n    enabled: true\n    hostname: localhost\n    port: 9092\n    bossThreads: 0\n    workerThreads: 0\n    allowCustomRequests: false\n    upgradeTimeout: 10000\n    pingTimeout: 60000\n    pingInterval: 25000\n    firstDataTimeout: 5000\n    maxHttpContentLength: 65536\n    maxFramePayloadLength: 65536\n    sslProtocol: \"TLSv1\"\n    keyStoreFormat: \"JKS\"\n    trustStoreFormat: \"JKS\"\n    preferDirectBuffer: true\n    addVersionHeader: true\n    httpCompression: true\n    websocketCompression: true\n    randomSession: false\n    retryCount: 3\n', '2fcbdd7781f350a082befd48008d2151', '2022-11-22 13:09:53', '2022-11-23 02:39:16', NULL, '172.18.0.1', '', '', '', '', '', 'yaml', '');
COMMIT;

-- ----------------------------
-- Table structure for config_info_aggr
-- ----------------------------
DROP TABLE IF EXISTS `config_info_aggr`;
CREATE TABLE `config_info_aggr` (
                                    `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
                                    `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
                                    `group_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
                                    `datum_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'datum_id',
                                    `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '内容',
                                    `gmt_modified` datetime NOT NULL COMMENT '修改时间',
                                    `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
                                    `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
                                    PRIMARY KEY (`id`),
                                    UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='增加租户字段';

-- ----------------------------
-- Records of config_info_aggr
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for config_info_beta
-- ----------------------------
DROP TABLE IF EXISTS `config_info_beta`;
CREATE TABLE `config_info_beta` (
                                    `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
                                    `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
                                    `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
                                    `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'app_name',
                                    `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'content',
                                    `beta_ips` varchar(1024) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'betaIps',
                                    `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'md5',
                                    `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
                                    `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
                                    `src_user` text CHARACTER SET utf8 COLLATE utf8_bin COMMENT 'source user',
                                    `src_ip` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'source ip',
                                    `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
                                    PRIMARY KEY (`id`),
                                    UNIQUE KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='config_info_beta';

-- ----------------------------
-- Records of config_info_beta
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for config_info_tag
-- ----------------------------
DROP TABLE IF EXISTS `config_info_tag`;
CREATE TABLE `config_info_tag` (
                                   `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
                                   `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
                                   `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
                                   `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_id',
                                   `tag_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'tag_id',
                                   `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'app_name',
                                   `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'content',
                                   `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'md5',
                                   `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
                                   `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
                                   `src_user` text CHARACTER SET utf8 COLLATE utf8_bin COMMENT 'source user',
                                   `src_ip` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'source ip',
                                   PRIMARY KEY (`id`),
                                   UNIQUE KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='config_info_tag';

-- ----------------------------
-- Records of config_info_tag
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for config_tags_relation
-- ----------------------------
DROP TABLE IF EXISTS `config_tags_relation`;
CREATE TABLE `config_tags_relation` (
                                        `id` bigint NOT NULL COMMENT 'id',
                                        `tag_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'tag_name',
                                        `tag_type` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'tag_type',
                                        `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
                                        `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
                                        `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_id',
                                        `nid` bigint NOT NULL AUTO_INCREMENT,
                                        PRIMARY KEY (`nid`),
                                        UNIQUE KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),
                                        KEY `idx_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='config_tag_relation';

-- ----------------------------
-- Records of config_tags_relation
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for group_capacity
-- ----------------------------
DROP TABLE IF EXISTS `group_capacity`;
CREATE TABLE `group_capacity` (
                                  `id` bigint unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
                                  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '' COMMENT 'Group ID，空字符表示整个集群',
                                  `quota` int unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值',
                                  `usage` int unsigned NOT NULL DEFAULT '0' COMMENT '使用量',
                                  `max_size` int unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
                                  `max_aggr_count` int unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数，，0表示使用默认值',
                                  `max_aggr_size` int unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
                                  `max_history_count` int unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量',
                                  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
                                  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
                                  PRIMARY KEY (`id`),
                                  UNIQUE KEY `uk_group_id` (`group_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='集群、各Group容量信息表';

-- ----------------------------
-- Records of group_capacity
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for his_config_info
-- ----------------------------
DROP TABLE IF EXISTS `his_config_info`;
CREATE TABLE `his_config_info` (
                                   `id` bigint unsigned NOT NULL,
                                   `nid` bigint unsigned NOT NULL AUTO_INCREMENT,
                                   `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
                                   `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
                                   `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'app_name',
                                   `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
                                   `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
                                   `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
                                   `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
                                   `src_user` text CHARACTER SET utf8 COLLATE utf8_bin,
                                   `src_ip` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
                                   `op_type` char(10) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
                                   `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
                                   PRIMARY KEY (`nid`),
                                   KEY `idx_gmt_create` (`gmt_create`),
                                   KEY `idx_gmt_modified` (`gmt_modified`),
                                   KEY `idx_did` (`data_id`)
) ENGINE=InnoDB AUTO_INCREMENT=393 DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='多租户改造';

-- ----------------------------
-- Records of his_config_info
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for permissions
-- ----------------------------
DROP TABLE IF EXISTS `permissions`;
CREATE TABLE `permissions` (
                               `role` varchar(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
                               `resource` varchar(512) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
                               `action` varchar(8) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
                               UNIQUE KEY `uk_role_permission` (`role`,`resource`,`action`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of permissions
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for roles
-- ----------------------------
DROP TABLE IF EXISTS `roles`;
CREATE TABLE `roles` (
                         `username` varchar(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
                         `role` varchar(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
                         UNIQUE KEY `idx_user_role` (`username`,`role`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of roles
-- ----------------------------
BEGIN;
INSERT INTO `roles` VALUES ('nacos', 'ROLE_ADMIN');
COMMIT;

-- ----------------------------
-- Table structure for tenant_capacity
-- ----------------------------
DROP TABLE IF EXISTS `tenant_capacity`;
CREATE TABLE `tenant_capacity` (
                                   `id` bigint unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
                                   `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '' COMMENT 'Tenant ID',
                                   `quota` int unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值',
                                   `usage` int unsigned NOT NULL DEFAULT '0' COMMENT '使用量',
                                   `max_size` int unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
                                   `max_aggr_count` int unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数',
                                   `max_aggr_size` int unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
                                   `max_history_count` int unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量',
                                   `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
                                   `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
                                   PRIMARY KEY (`id`),
                                   UNIQUE KEY `uk_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='租户容量信息表';

-- ----------------------------
-- Records of tenant_capacity
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for tenant_info
-- ----------------------------
DROP TABLE IF EXISTS `tenant_info`;
CREATE TABLE `tenant_info` (
                               `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
                               `kp` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'kp',
                               `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_id',
                               `tenant_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_name',
                               `tenant_desc` varchar(256) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'tenant_desc',
                               `create_source` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'create_source',
                               `gmt_create` bigint NOT NULL COMMENT '创建时间',
                               `gmt_modified` bigint NOT NULL COMMENT '修改时间',
                               PRIMARY KEY (`id`),
                               UNIQUE KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),
                               KEY `idx_tenant_id` (`tenant_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='tenant_info';

-- ----------------------------
-- Records of tenant_info
-- ----------------------------
BEGIN;
INSERT INTO `tenant_info` VALUES (3, '1', 'release', 'release', '生产环境', 'nacos', 1650085126591, 1650086069647);
INSERT INTO `tenant_info` VALUES (4, '1', 'dev', 'dev', '开发环境', 'nacos', 1650085148863, 1650086074632);
COMMIT;

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users` (
                         `username` varchar(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
                         `password` varchar(500) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
                         `enabled` tinyint(1) NOT NULL,
                         PRIMARY KEY (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of users
-- ----------------------------
BEGIN;
INSERT INTO `users` VALUES ('nacos', '$2a$10$jNcdQzaeyy0Tgg.10DUEb.4fHVa8Mytq10igaVl6JdOI7xtlUv52W', 1);
COMMIT;

SET FOREIGN_KEY_CHECKS = 1;




